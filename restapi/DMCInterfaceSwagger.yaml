swagger: '2.0'
info:
  version: 1.0.0
  title: DMC Interface Definition
  description: |
    **REST service interface definitions for DMC**
host: dmc.com
basePath: /
schemes:
  - http
  - https
consumes:
  - application/json
  - text/xml
produces:
  - application/json
  - text/html
paths:
  /user:
    get:
      tags:
        - account
        - live
        - has tests
      description: Get currently logged in user details.  If user does not exist, create account.
      responses:
        '200':
          description: Sends the project with projectID
          schema:
            $ref: '#/definitions/UserDetails'
    patch:
      tags:
      - account
      - onboarding
      - live
      - has tests
      description: Update currently logged in user details
      parameters:
        - name: UserDetails
          in: body
          schema:
            $ref: '#/definitions/UserDetails'
      responses:
        200:
          description: returns updated User Details
          schema:
            $ref: '#/definitions/UserDetails'
  /user-basic-information:
    post:
      tags:
        - account
        - onboarding
        - live
        - has tests
      description: Set initial basic information for User after first login
      parameters:
        - in: body
          name: UserBasicInformation
          description: Basic information required after first login.
          required: false
          schema:
            $ref: '#/definitions/UserBasicInformation'
      responses:
        '201':
          description: updated user object
          schema:
            $ref: '#/definitions/UserBasicInformation'
  '/mark-read-notifications':
    patch:
      tags:
        - notification
      description: Mark read for all user notifications
      parameters:
        - name: UserDetails
          in: body
          schema:
            $ref: '#/definitions/UserDetails'
          required: true
      responses:
        200:
          description: returns updated User Details
          schema:
            $ref: '#/definitions/UserDetails'
  '/clear-notification/{id}':
    patch:
      tags:
        - notification
      description: Clear notification from dropdown in header
      parameters:
        - name: id
          in: path
          type: string
          description: ID notification
          required: true
        - name: UserDetails
          in: body
          schema:
            $ref: '#/definitions/UserDetails'
          required: true
      responses:
        200:
          description: returns updated User Details
          schema:
            $ref: '#/definitions/UserDetails'
  
  '/accounts/{accountID}':
    get:
      tags:
        - account
        - live
        - has tests
      description: Get account information by account id
      parameters:
        - name: accountID
          in: path
          type: string
          description: ID of the account
          required: true
      responses:
        '200':
          description: Sends the account with accountID
          schema:
            $ref: '#/definitions/UserAccount'
    patch:
      tags:
        - account
        - live
        - has tests
      description: Update account information by account id
      parameters:
        - name: accountID
          in: path
          type: string
          description: ID of the account
          required: true
        - name: account
          in: body
          schema:
            $ref: '#/definitions/UserAccount'
      responses:
        200:
          description: returns updated User Account
          schema:
            $ref: '#/definitions/UserAccount'
  '/accounts/{accountID}/account_servers':
    get:
      tags:
        - account
        - not implemented
      description: Get servers by account id
      parameters:
        - name: accountID
          in: path
          type: string
          description: ID of the account
          required: true
      responses:
        '200':
          description: Sends the servers by account id
          schema:
            type: array
            items:
              $ref: '#/definitions/UserAccountServer'
  '/accounts/{accountID}/account-notification-settings':
    get:
      tags:
        - account
        - not implemented
      description: Get account notification settings by accound id
      parameters:
        - name: accountID
          in: path
          type: string
          description: ID of the account
          required: true
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: Sends account notification settings by account id
          schema:
            type: array
            items:
              $ref: '#/definitions/AccountNotificationSetting'
  '/account-notification-settings/{notificationSettingID}':
    get:
      tags:
        - account
        - not implemented
      description: Get account notification setting by id
      parameters:
        - name: notificationSettingID
          in: path
          type: string
          description: ID of the account notification
          required: true
      responses:
        '200':
          description: Sends the notification information
          schema:
            $ref: '#/definitions/AccountNotificationSetting'
    patch:
      tags:
        - account
        - not implemented
      description: Update account notification by id
      parameters:
        - name: notificationSettingID
          in: path
          type: string
          description: ID of the account notification
          required: true
        - name: userNotificationSetting
          in: body
          schema:
            $ref: '#/definitions/AccountNotificationSetting'
      responses:
        200:
          description: returns updated account notification information
          schema:
            $ref: '#/definitions/AccountNotificationSetting'
  '/account-notification-categories':
    get:
      tags:
        - account
        - not implemented
      description: Get categories and labels for Account Notification tab
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: send an array of notification categories
          schema:
            type: array
            items:
              $ref: '#/definitions/AccountNotificationCategory'
  '/account_servers':
    post:
      tags:
        - account
        - live
        - has tests
      description: Create a new account server
      parameters:
        - in: body
          name: AccountServer
          description: server object to be created
          required: false
          schema:
            $ref: '#/definitions/UserAccountServer'
      responses:
        '201':
          description: new server added
          schema:
            $ref: '#/definitions/UserAccountServer'
        '422':
          description: Server URL is invalid
        '500':
          description: Unknown REST Server Error
        '502':
          description: DOME not running on specified server
        '504':
          description: Specified server is unreachable
          
  '/account_servers/{serverID}':
    get:
      tags:
        - account
        - live
        - has tests
      description: Get server by server id
      parameters:
        - name: serverID
          in: path
          type: string
          description: ID of the server
          required: true
      responses:
        '200':
          description: Sends the server information
          schema:
            $ref: '#/definitions/UserAccountServer'
        '401':
          description: User does not have credentials to view this server
        '422':
          description: Server URL is not valid
        '502':
          description: DOME not running on specified server
        '504': 
          description: Specified server is unreachable
        
    patch:
      tags:
        - account
        - live
        - has tests
      description: Update server information by server id
      parameters:
        - name: serverID
          in: path
          type: string
          description: ID of the server
          required: true
        - name: server
          in: body
          schema:
            $ref: '#/definitions/UserAccountServer'
      responses:
        200:
          description: returns updated server information
          schema:
            $ref: '#/definitions/UserAccountServer'
        401:
          description: User is not permitted to edit this server
        422:
          description: Provided URL is invalid
        500:
          description: Unknown server error
        502:
          description: DOME not running on specified server
        504:
          description: Specified server specified is unreachable
    delete:
      tags:
        - account
        - live
        - has tests
      description: Delete a server by id
      parameters:
        - in: path
          name: serverID
          description: ID of server to be deleted
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/accounts/{accountID}/following_companies':
    get:
      tags:
        - account
        - not implemented
      description: Get favorite storefronts
      parameters:
        - name: accountID
          in: path
          type: string
          description: ID of the account
          required: true
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return favorite storefronts
          schema:
            type: array
            items:
              $ref: '#/definitions/FollowingCompany'
  '/accounts/{accountID}/favorite_products':
    get:
      tags:
        - account
        - not implemented
      description: Get all favorite services
      parameters:
        - name: accountID
          in: path
          type: string
          description: ID of the account
          required: true
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: Return favorite services
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                accountId:
                  type: string
                serviceId:
                  type: string
  '/projects_tags':
    post:
      tags:
        - project
        - not implemented
      description: Add new project tag
      parameters:
        - in: body
          name: body
          description: Project tag object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/PostProjectTag'
      responses:
        '200':
          description: return added project tag
          schema:
            $ref: '#/definitions/GetProjectTag'
  '/projects_tags/{projectTagid}':
    delete:
      tags:
        - project
        - not implemented
      description: Delete Project Tag
      parameters:
        - name: projectTagid
          in: path
          type: string
          description: ID of the Project Tag
          required: true
      responses:
        '200':
          description: Ok
  '/projects/{projectID}/projects_members':
    get:
      tags:
        - project
        - not implemented
      description: Get all project members
      parameters:
        - name: projectID
          in: path
          type: string
          description: ID of the project
          required: true
      responses:
        '200':
          description: return array of project members
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectMember'
  '/project/{projectId}/invite/{projectMemberId}':
    patch:
      tags:
        - project
      description: Re Invite user to the project from team project page (from removed tab)
      parameters:
        - name: projectId
          in: path
          type: string
          description: ID of the project
          required: true
        - name: projectMemberId
          in: path
          type: string
          description: ID of the project member
          required: true
        - in: body
          name: Member
          description: Member to be updated
          required: false
          schema:
            $ref: '#/definitions/ProjectMember'
      responses:
        '200':
          description: return project member
          schema:
            $ref: '#/definitions/ProjectMember'
  '/projects/{projectID}/projects_tags':
    get:
      tags:
        - project
        - not implemented
      description: Get all project tags
      parameters:
        - name: projectID
          in: path
          type: string
          description: ID of the project
          required: true
      responses:
        '200':
          description: return array of project tags
          schema:
            type: array
            items:
              $ref: '#/definitions/GetProjectTag'
  '/projects/all':
    get:
      tags:
        - project
      description: Get all projects
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
        - name: title_like
          in: query
          description: Filter by title
          type: string
          required: false  
      responses:
        '200':
          description: return array of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  '/projects':
    get:
      tags:
        - project
        - live
        - has tests
      description: Get all user projects
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
        - name: title_like
          in: query
          description: Filter by title
          type: string
      responses:
        '200':
          description: return array of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  /projects/create:
    post:
      tags:
        - project
        - live
        - has tests
      description: Post a new project to store in the database
      operationId: postProject
      parameters:
        - in: body
          name: body
          description: Project object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/Project'
      responses:
        '201':
          description: New project
          schema:
            $ref: '#/definitions/Project'
  '/projects/{projectID}':
    get:
      tags:
        - project
        - project.php
        - live
        - has tests
      summary: Get project information by project id
      description: Get information about a project...
      operationId: findProjectByID
      parameters:
        - name: projectID
          in: path
          type: string
          description: ID of the project
          required: true
      responses:
        '200':
          description: Sends the project with projectID
          schema:
            $ref: '#/definitions/Project'
  '/projects/{projectID}/following_discussions':
    get:
      tags:
        - project
        - discussion
        - not implemented
      description: Get all project discussions being followed
      parameters:
        - name: projectID
          in: path
          type: string
          description: ID of the project
          required: true
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return all project discussions being followed
          schema:
            type: array
            items:
              $ref: '#/definitions/IndividualDiscussion'
  '/projects/{projectID}/all-discussions':
    get:
      tags:
        - project
        - discussion
        - not implemented
      description: Get all project discussion threads
      parameters:
        - name: projectID
          in: path
          type: string
          description: ID of the project
          required: true
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return project discussion threads
          schema:
            type: array
            items:
              $ref: '#/definitions/IndividualDiscussion'
  '/all-discussions':
    get:
      tags:
        - project
        - discussion
        - live
        - has tests
      description: Get all user discussion threads
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return user discussion threads
          schema:
            type: array
            items:
              $ref: '#/definitions/IndividualDiscussion'
  '/projects_members':
    get:
      tags:
        - project
        - add member
        - not implemented
      description: Get members
      parameters:
        - in: query
          name: projectId
          description: project id
          required: false
          type: string
        - in: query
          name: profileId
          description: profile id
          required: false
          type: string
        - in: query
          name: accept
          description: accepted inivation
          required: false
          type: boolean
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return members
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectMember'
    post:
      tags:
        - project
        - add member
        - not implemented
      description: Create a new member
      parameters:
        - in: body
          name: Member
          description: Member to be created
          required: false
          schema:
            $ref: '#/definitions/ProjectMember'
      responses:
        '201':
          description: New member
          schema:
            $ref: '#/definitions/ProjectMember'
  '/projects_members/{memberId}':
    get:
      tags:
        - project
        - add member
        - not implemented
      description: Get member by id
      parameters:
        - in: path
          name: memberId
          description: member id
          required: true
          type: string
      responses:
        '200':
          description: return member
          schema:
            $ref: '#/definitions/ProjectMember'
  '/projects/{projectId}/accept/{memberId}':
    patch:
      tags:
        - project
        - add member
        - live
        - has tests
      description: Accept member inivitation
      parameters:
        - in: path
          name: memberId
          type: string
          description: Project member id
          required: true
        - in: path
          name: projectId
          type: string
          description: Project id
          required: true
        - in: body
          name: Member
          schema:
            $ref: '#/definitions/ProjectMember'
      responses:
        '200':
          description: Return updated member
          schema:
            $ref: '#/definitions/ProjectMember'
  '/projects/{projectId}/reject/{memberId}':
    delete:
      tags:
        - project
        - add member
        - live
      description: Decline member inivitation
      parameters:
        - in: path
          name: memberId
          type: string
          description: member id
          required: true
        - in: path
          name: projectId
          type: string
          description: Project id
          required: true
      responses:
        '200':
          description: Ok
  /tasks/create:
    post:
      tags:
        - task
        - live
        - has tests
      summary: Post a new task
      description: Post a new task to store in the database
      operationId: postTask
      parameters:
        - in: body
          name: body
          description: Task object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: return created task
          schema:
            $ref: '#/definitions/Task'
        '405':
          description: Invalid input
  '/tasks':
    get:
      tags:
        - task
        - live
        - has tests
      summary: Get tasks
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
        - name: title_like
          in: query
          description: Select by title name
          type: string
          required: false
      responses:
        '200':
          description: send the task with taskID
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
  '/tasks/{taskID}':
    patch:
      tags:
        - task
        - not implemented
      description: Update task
      parameters:
        - name: taskID
          in: path
          type: string
          description: ID of the task
          required: true
        - in: body
          name: body
          description: Task body
          required: false
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: return updated task
          schema:
            $ref: '#/definitions/Task'
    get:
      tags:
        - task
        - live
        - has tests
      summary: Get task information by task id
      description: Get information about a task...
      operationId: findTaskByID
      parameters:
        - name: taskID
          in: path
          type: string
          description: ID of the task
          required: true
        - name: projectId
          in: query
          type: string
          description: id of project
          required: false
      responses:
        '200':
          description: send the task with taskID
          schema:
            $ref: '#/definitions/Task'
    delete:
      tags:
        - task
        - not implemented
      description: Delete task
      parameters:
        - name: taskID
          in: path
          type: string
          description: ID of the task
          required: true
      responses:
        '200':
          description: Ok
  '/compare_services':
    post:
      tags:
        - service
      description: Post a new compare service
      parameters:
        - in: body
          name: body
          description: Compare service object
          required: false
          schema:
            $ref: '#/definitions/PostCompareService'
      responses:
        '200':
          description: Return created compare service
          schema:
            $ref: '#/definitions/GetCompareService'
        '405':
          description: Invalid input
  '/compare_services/{id}':
    delete:
      tags:
        - service
      description: Delete service from compare
      parameters:
        - in: path
          name: id
          description: Id compared service
          required: true
          type: string
      responses:
        '200':
          description: Ok
        '405':
          description: Invalid input
  '/profiles/{profileId}/compare_services':
    get:
      tags:
        - service
        - profile
      description: Get all user compared services
      parameters:
        - in: path
          name: profileId
          description: profileId
          required: true
          type: string
      responses:
        '200':
          description: Return array of compared services
          schema:
            type: array
            items:
              $ref: '#/definitions/GetCompareService'
        '405':
          description: Invalid input
  '/dome-interfaces':
    post:
      tags:
        - service
        - live
        - has tests
      description: Post a new dome interface
      parameters:
        - in: body
          name: body
          description: Dome interface object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/PostUpdateDomeInterface'
      responses:
        '200':
          description: Return dome inerface object with id
          schema:
            $ref: '#/definitions/GetDomeInterface'
        '405':
          description: Invalid input
  '/dome-interfaces/{domeInterfaceId}':
    delete:
      tags:
        - service
        - live
        - has tests
      description: Get service dome interface
      parameters:
        - in: path
          name: domeInterfaceId
          required: true
          description: Dome interfaceId id
          type: number
      responses:
        '200':
          description: Ok
    patch:
      tags:
        - service
        - live
        - has tests
      description: Update dome interface
      parameters:
        - in: path
          name: domeInterfaceId
          required: true
          description: Dome interfaceId id
          type: number
        - in: body
          name: Dome interface
          description: Dome interface object for updated in database
          required: false
          schema:
            $ref: '#/definitions/PostUpdateDomeInterface'
      responses:
        '200':
          description: Return updated dome inerface object
          schema:
            $ref: '#/definitions/GetDomeInterface'
    get:
      tags:
        - service
        - live
        - has tests
      description: Get dome interface
      parameters:
        - in: path
          name: domeInterfaceId
          required: true
          description: Dome interfaceId id
          type: number
      responses:
        '200':
          description: Return dome inerface object
          schema:
            $ref: '#/definitions/GetDomeInterface'
  '/getChildren':
    get:
      tags:
        - service
        - live
        - has tests
      description: Get children from Dome API
      parameters:
        - in: query
          name: domeServer
          description: Address of Dome server
          required: true
          type: string
        - in: query
          name: dateModified
          description: Date Dome model was modified (if type is model)
          required: false
          type: string
        - in: query
          name: description
          description: Description of Dome model (if type is model)
          required: false
          type: string
        - in: query
          name: modelId
          description: Id of Dome model (if type is model)
          required: false
          type: string
        - in: query
          name: name
          description: Dome object name (if type is model or folder)
          required: false
          type: string
        - in: query
          name: path
          description: Path of Dome object (if type is model or folder)
          required: false
          type: array
          items:
            type: number
        - in: query
          name: type
          description: Type of Dome object -- Either "" "folder" or "model"
          required: false
          type: string
        - in: query
          name: version
          description: Version of Dome model (if type is model)
          required: false
          type: string
      responses:
        '200':
          description: Return the JSON object that was sent by the Dome API, object attribute is null if not needed (needed attributes depend on if type is folder, model, or neither)
          schema:
            $ref: '#/definitions/DomeResponseEntity'
  '/getModel':
    get:
      tags:
        - service
        - live
        - has tests
      description: Get model from Dome API
      parameters:
        - in: query
          name: domeServer
          description: Address of Dome server
          required: true
          type: string
        - in: query
          name: interfaceId
          description: Id of Dome interface
          required: true
          type: string
        - in: query
          name: modelId
          description: Id of Dome model (if type is interface)
          required: false
          type: string
        - in: query
          name: projectId
          description: Id of Dome project (if type is project)
          required: false
          type: string
        - in: query
          name: name
          description: Name of Dome model
          required: true
          type: string
        - in: query
          name: path
          description: Path of Dome object 
          required: true
          type: array
          items:
            type: number
        - in: query
          name: type
          description: Type of Dome object -- Either "interface" or "project"
          required: true
          type: string
        - in: query
          name: version
          description: Version of Dome model
          required: true
          type: string
      responses:
        '200':
          description: Return the JSON object that was sent by the Dome API, object attribute is null if not needed (needed attributes depend on if type was interface or project)
          schema:
            $ref: '#/definitions/DomeModelResponse'
  '/services/{serviceId}/dome-interfaces':
    get:
      tags:
        - service
        - live
        - has tests
      description: Get service dome interface
      parameters:
        - in: path
          name: serviceId
          required: true
          description: Service id
          type: number
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: Return service dome interface objects
          schema:
            type: array
            items:
                $ref: '#/definitions/GetDomeInterface'
  '/service_runs':
    post:
      tags:
        - service
        - not implemented
      summary: Post a new run service
      description: Post a new run service
      parameters:
        - in: body
          name: body
          description: Service run object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/PostServiceRun'
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: Return run service object with id
          schema:
            $ref: '#/definitions/GetServiceRun'
  '/service_runs/{id}':
    get:
      tags:
        - service
        - not implemented
      summary: Get a run service
      description: Get a run service
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the run service
          required: true
      responses:
        '200':
          description: Return run service object with id
          schema:
            $ref: '#/definitions/GetServiceRun'
    patch:
      tags:
        - service
        - not implemented
      summary: Update run service
      description: Update run service
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the run service
          required: true
        - name: body
          in: body
          description: Data for update run service
          required: true
          schema:
            $ref: '#/definitions/UpdateServiceRun'
      responses:
        '200':
          description: Return updated run service object
          schema:
            $ref: '#/definitions/GetServiceRun'
    delete:
      tags:
        - service
        - not implemented
      summary: Delete run service
      description: Delete run service
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the run service
          required: true
      responses:
        '204':
          description: OK
  '/services':
    post:
      tags:
        - service
        - live
        - has tests
      summary: Post a new service
      description: Post a new service to store in the database
      operationId: postService
      parameters:
        - in: body
          name: body
          description: Service object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/Service'
      responses:
        '405':
          description: Invalid input
    get:
      tags:
        - service
        - marketplace
        - live
        - has tests
      description: get all services
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: send all services
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
  '/services/{serviceID}':
    get:
      tags:
        - service
        - marketplace
        - live
        - has tests
      summary: Get information for a service
      description: Get information about a service...
      operationId: findServiceByID
      parameters:
        - name: serviceID
          in: path
          type: string
          description: ID of the service
          required: true
      responses:
        '200':
          description: send the service with serviceID
          schema:
            $ref: '#/definitions/Service'
    patch:
      tags:
        - service
        - marketplace
        - live
        - has tests
      description: Update information for service by ID
      parameters:
        - name: serviceID
          in: path
          type: string
          description: ID of the service
          required: true
        - name: service
          in: body
          schema:
            $ref: '#/definitions/Service'
      responses:
        200:
          description: returns updated service
          schema:
            $ref: '#/definitions/Service'
  '/services/{serviceID}/service_history':
    get:
      tags:
        - service
        - history
        - marketplace
        - not implemented
      description: Get service history by service id
      parameters:
        - name: serviceID
          in: path
          type: string
          description: ID of the service
          required: true
        - name: period
          in: query
          description: Filter by period
          type: string
          required: false
        - name: section
          in: query
          description: Filter by section
          type: string
          required: false
      responses:
        '200':
          description: return service history
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceHistory'
  '/projects/{projectID}/project_documents':
    get:
      tags:
        - project
        - document
        - not implemented
      description: Get all documents in a project
      parameters:
        - name: projectID
          in: path
          type: string
          description: ID of the project
          required: true
        - name: project-documentId
          in: query
          type: string
          description: Parent document Id (default 0)
          required: true
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return all project documents
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectDocument'
  '/project_documents/{id}':
    patch:
      tags:
        - project
        - document
      description: Update document
      parameters:
        - name: id
          in: path
          type: string
          description: ID document
          required: true
        - in: body
          name: body
          description: body of project document
          required: true
          schema:
            $ref: '#/definitions/DocumentBody'
      responses:
        '200':
          description: return updated document
          schema:
            $ref: '#/definitions/ProjectDocument'
    delete:
      tags:
        - project
        - document
      description: Delete project document by id
      parameters:
        - name: id
          in: path
          type: string
          description: ID document
          required: true
      responses:
        '200':
          description: Ok
  '/services/{serviceID}/service_documents':
    get:
      tags:
        - service
        - document
        - marketplace
        - not implemented
      description: Get all documents in a service
      parameters:
        - name: serviceID
          in: path
          type: string
          description: ID of the service
          required: true
        - name: service-documentId
          in: query
          type: string
          description: Parent document Id (default 0)
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return all service documents
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceDocument'
  '/service_documents/{id}':
    patch:
      tags:
        - service
        - marketplace
        - document
      description: Update document
      parameters:
        - name: id
          in: path
          type: string
          description: ID document
          required: true
        - in: body
          name: body
          description: body of service document
          required: true
          schema:
            $ref: '#/definitions/DocumentBody'
      responses:
        '200':
          description: return updated document
          schema:
            $ref: '#/definitions/ServiceDocument'
    delete:
      tags:
        - service
        - document
        - marketplace
      description: Delete service document by id
      parameters:
        - name: id
          in: path
          type: string
          description: ID document
          required: true
      responses:
        '200':
          description: Ok
  '/projects_join_requests':
    get:
      tags:
        - project
        - profile
      description: Return all join requests of projects
      parameters:
        - in: query
          name: projectId
          description: Project id
          required: false
          type: array
          items:
            type: string
        - in: query
          name: profileId
          description: Profile Id
          required: false
          type: array
          items:
            type: string
      responses:
        '200':
          description: Return all join requests of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/GetProjectJoinRequest'     
    post:
      tags:
        - project
        - profile
      description: Add new join requests of project
      parameters:
        - in: body
          name: body
          description: body of join request
          required: true
          schema:
            $ref: '#/definitions/PostProjectJoinRequest'
      responses:
        '200':
          description: return created request
          schema:
            $ref: '#/definitions/GetProjectJoinRequest'
  '/projects/{projectId}/projects_join_requests':        
    get:
      tags:
        - project
        - profile
      description: Return all join requests of project
      parameters:
        - in: path
          name: projectId
          description: Project id
          required: true
          type: string
        - in: query
          name: profileId
          description: Profile Id
          required: false
          type: array
          items:
            type: string
      responses:
        '200':
          description: Return all join requests of project
          schema:
            type: array
            items:
              $ref: '#/definitions/GetProjectJoinRequest'
  '/profiles/{profileId}/projects_join_requests':        
    get:
      tags:
        - project
        - profile
      description: Return all project join requests of user
      parameters:
        - in: path
          name: profileId
          description: Profile id
          required: true
          type: string
        - in: query
          name: projectId
          description: Project Id
          required: false
          type: array
          items:
            type: string
      responses:
        '200':
          description: Return all project join requests of user
          schema:
            type: array
            items:
              $ref: '#/definitions/GetProjectJoinRequest'
  '/projects_join_requests/{id}':
    delete:
      tags:
        - project
        - profile
      description: delete join request
      parameters:
        - in: path
          name: id
          description: request id
          required: true
          type: string
      responses:
        '200':
          description: Ok
  '/company_contact_methods':
    post:
      tags:
        - company
      description: Add new company contact method
      parameters:
        - in: body
          name: body
          description: body of contact method
          required: true
          schema:
            $ref: '#/definitions/PostCompanyContactMethod'
      responses:
        '200':
          description: return contact method
          schema:
            $ref: '#/definitions/GetCompanyContactMethod'
  '/company_contact_methods/{id}':
    delete:
      tags:
        - company
      description: Add new company contact method
      parameters:
        - in: path
          name: id
          description: Company contact methods id
          type: string
          required: true
      responses:
        '200':
          description: Ok
    patch:
      tags:
        - company
      description: Update company contact method
      parameters:
        - in: path
          name: id
          description: Company contact methods id
          type: string
          required: true
        - in: body
          name: body
          description: body of contact method
          required: true
          schema:
            $ref: '#/definitions/PostCompanyContactMethod'
      responses:
        '200':
          description: return contact method
          schema:
            $ref: '#/definitions/GetCompanyContactMethod'
  '/companies/{companyId}/company_contact_methods':
    get:
      tags:
        - company
      description: Get contact methods of company
      parameters:
        - in: path
          name: companyId
          description: Company id
          type: string
          required: true
      responses:
        '200':
          description: return contact method
          schema:
            type: array
            items:
              $ref: '#/definitions/GetCompanyContactMethod'
  '/removed_company_members':
    post:
      tags:
        - company
      description: Add new removed company member
      parameters:
        - in: body
          name: body
          description: body of removed company member
          required: true
          schema:
            $ref: '#/definitions/PostRemovedCompanyMember'
      responses:
        '200':
          description: return removed member
          schema:
            $ref: '#/definitions/GetRemovedCompanyMember'
  '/removed_company_members/{id}':
    delete:
      tags:
        - company
      description: Remove removed company member
      parameters:
        - in: path
          name: id
          description: removed company member id 
          type: string
          required: true
      responses:
        '200':
          description: Ok
    patch:
      tags:
        - company
      description: Update removed company member
      parameters:
        - in: path
          name: id
          description: Removed company member id
          type: string
          required: true
        - in: body
          name: body
          description: body of removed company member
          required: true
          schema:
            $ref: '#/definitions/PostRemovedCompanyMember'
      responses:
        '200':
          description: return contact method
          schema:
            $ref: '#/definitions/GetRemovedCompanyMember'
  '/companies/{companyId}/removed_company_members':
    get:
      tags:
        - company
      description: Get removed company members
      parameters:
        - in: path
          name: companyId
          description: Company id
          type: string
          required: true
      responses:
        '200':
          description: return contact method
          schema:
            type: array
            items:
              $ref: '#/definitions/GetCompanyContactMethod'
  '/suggest_join_companies':
    post:
      tags:
        - company
      description: Suggest user company joins DMDII
      parameters:
        - in: body
          name: body
          description: body of suggest join company
          required: true
          schema:
            $ref: '#/definitions/PostSuggestCompany'
      responses:
        '200':
          description: return new join
          schema:
            $ref: '#/definitions/GetSuggestCompany'
  '/suggest_join_companies/{id}':
    delete:
      tags:
        - company
      description: Cancel suggest company join DMDII
      parameters:
        - in: path
          name: id
          description: suggest company join id
          type: string
          required: true
      responses:
        '200':
          description: OK    
  '/companies/{companyId}/suggest_join_companies':
    get:
      tags:
        - company
      description: Get company suggest join DMDII
      parameters:
        - in: path
          name: companyId
          description: Company id
          type: string
          required: true
      responses:
        '200':
          description: return new join
          schema:
            type: array
            items:
              $ref: '#/definitions/GetSuggestCompany'
  '/companies_join_requests':
      get:
        tags:
          - company
          - profile
        description: Return all join requests of companies
        parameters:
          - in: query
            name: companyId
            description: Company id
            required: false
            type: array
            items:
              type: string
          - in: query
            name: profileId
            description: Profile Id
            required: false
            type: array
            items:
              type: string
        responses:
          '200':
            description: Return all join requests of companies
            schema:
              type: array
              items:
                $ref: '#/definitions/GetCompanyJoinRequest'
      post:
        tags:
          - company
          - profile
        description: Add new join requests of company
        parameters:
          - in: body
            name: body
            description: body of join request
            required: true
            schema:
              $ref: '#/definitions/PostCompanyJoinRequest'
        responses:
          '200':
            description: return created request
            schema:
              $ref: '#/definitions/GetCompanyJoinRequest'
  '/companies/{companyId}/companies_join_requests':
      get:
        tags:
          - company
          - profile
        description: Return all join requests of company
        parameters:
          - in: path
            name: companyId
            description: Company id
            required: true
            type: string
          - in: query
            name: profileId
            description: Profile Id
            required: false
            type: array
            items:
              type: string
        responses:
          '200':
            description: Return all join requests of company
            schema:
              type: array
              items:
                $ref: '#/definitions/GetCompanyJoinRequest'
  '/profiles/{profileId}/companies_join_requests':
      get:
        tags:
          - company
          - profile
        description: Return all company join requests of user
        parameters:
          - in: path
            name: profileId
            description: Profile id
            required: true
            type: string
          - in: query
            name: compnayId
            description: Compnay Id
            required: false
            type: array
            items:
              type: string
        responses:
          '200':
            description: Return all compnay join requests of user
            schema:
              type: array
              items:
                $ref: '#/definitions/GetCompanyJoinRequest'
  '/companies_join_requests/{id}':
      delete:
        tags:
          - company
          - profile
        description: delete join request
        parameters:
          - in: path
            name: id
            description: request id
            required: true
            type: string
        responses:
          '200':
            description: Ok
  '/services/{serviceID}/service_authors':
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: Get all authors for a service
      parameters:
        - name: serviceID
          in: path
          type: string
          description: ID of the service
          required: true
      responses:
        '200':
          description: return all authors for a service
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceAuthor'
  '/services/{serviceID}/services_statistic':
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: Get all statistics for a service
      parameters:
        - name: serviceID
          in: path
          type: string
          description: ID of the service
          required: true
      responses:
        '200':
          description: return all statistics for a service
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceStats'
  '/services/{serviceID}/service_tags':
    get:
      tags:
        - service
        - marketplace
        - live
        - has tests
      description: Get all tags for a service
      parameters:
        - name: serviceID
          in: path
          type: string
          description: ID of the service
          required: true
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
      responses:
        '200':
          description: return all tags for a service
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceTag'
  '/service_tags':
    post:
      tags:
        - service
        - marketplace
        - live
        - has tests
      description: Create a new service tag
      parameters:
        - in: body
          name: ServiceTag
          description: Service tag to be created
          required: false
          schema:
            $ref: '#/definitions/ServiceTag'
      responses:
        '201':
          description: New service tag
          schema:
            $ref: '#/definitions/ServiceTag'
    get:
      tags:
        - service
        - marketplace
        - live
        - has tests
      description: Get latest service tag
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
      responses:
        '200':
          description: return latest service tag
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceTag'
  '/service_tags/{serviceTagID}':
    delete:
      tags:
        - service
        - marketplace
        - live
        - has tests
      description: Delete a service tag
      parameters:
        - in: path
          name: serviceTagID
          description: ID of service tag
          required: true
          type: string
      responses:
        '204':
          description: OK
  '/service/{serviceID}/specifications':
    post:
      tags:
        - service
        - specification
        - live
        - has tests
      operationId: postServiceSpecification
      parameters:
        - name: serviceID
          in: path
          type: string
          description: ID of the service
          required: true
        - in: body
          name: body
          description: body of specification
          required: true
          schema:
            $ref: '#/definitions/ServiceSpecifications'
      responses:
        '200':
          description: post specification for service
  '/services/{serviceID}/specifications':
    get:
      tags:
        - service
        - specification
        - marketplace
        - live
      parameters:
        - name: serviceID
          in: path
          type: string
          description: ID of the service
          required: true
      responses:
        '200':
          description: send specification for service
          schema:
            $ref: '#/definitions/ServiceSpecifications'
  '/specifications/{specificationId}':
    patch:
      tags:
        - service
        - specifications
        - marketplace
        - not implemented
      parameters:
        - name: specificationId
          in: path
          type: string
          description: ID of the specifications
          required: true
        - in: body
          name: body
          description: body of specification
          required: true
          schema:
            $ref: '#/definitions/ServiceSpecifications'
      responses:
        200:
          description: returns updated specifications
          schema:
            $ref: '#/definitions/ServiceSpecifications'
  '/services/{serviceID}/service_images':
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: get images for service
      parameters:
        - name: serviceID
          in: path
          type: string
          description: ID of the service
          required: true
      responses:
        '200':
          description: send images for service
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceImages'
  '/service_images/{imageId}':
    delete:
      tags:
        - service
        - marketplace
        - not implemented
      description: remove image
      parameters:
        - name: imageId
          in: path
          type: string
          description: Id of the image
          required: true
      responses:
        '204':
          description: Ok
  '/service_images':
    post:
      tags:
        - service
        - marketplace
        - not implemented
      description: Create a new service image
      parameters:
        - in: body
          name: ServiceImage
          description: Service image to be created
          required: false
          schema:
            $ref: '#/definitions/ServiceImages'
      responses:
        '201':
          description: New service image
          schema:
            $ref: '#/definitions/ServiceImages'
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: Get latest service tag
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
      responses:
        '200':
          description: return latest service tag
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceTag'
  /components:
    post:
      tags:
        - component
        - not implemented
      summary: Post a new component
      description: Post a new component to store in the database
      operationId: postComponent
      parameters:
        - in: body
          name: body
          description: Component object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/Component'
      responses:
        '405':
          description: Invalid input
  '/components/{componentID}':
    get:
      tags:
        - component
        - live
        - has tests
      summary: Get information for a component
      description: Get specification for a component based on componentID
      operationId: getComponentByServiceID
      parameters:
        - name: componentID
          in: path
          type: string
          description: ID of the component
          required: true
      responses:
        '200':
          description: send the component with componentID
          schema:
            $ref: '#/definitions/Component'
  '/popular_discussions':
    get:
      tags:
        - discussion
        - not implemented
      description: Get popular discussions
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return popular discussions
          schema:
            type: array
            items:
              $ref: '#/definitions/IndividualDiscussion'
  '/follow_people_discussions':
    get:
      tags:
        - discussion
        - not implemented
      description: Get discussion of people being followed
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return discussions of people being
          schema:
            type: array
            items:
              $ref: '#/definitions/IndividualDiscussion'
  '/following_discussions':
    get:
      tags:
        - discussion
        - dashboard.php
        - not implemented
      description: Get discussion being followed
      responses:
        '200':
          description: return discussons being followed
          schema:
            type: array
            items:
              $ref: '#/definitions/IndividualDiscussion'
  '/follow_discussions':
    patch:
      tags:
        - discussion
        - not implemented
      description: Update follow discussion
      parameters:
        - in: body
          name: body
          description: Follow Discussion object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/FollowingIndividualDiscussion'
      responses:
        200:
          description: Returns updated Follow Discussion
          schema:
            $ref: '#/definitions/FollowingIndividualDiscussion'
  '/follow_discussions/{followID}':
    delete:
      tags:
        - discussion
        - not implemented
      description: remove follow discussion (Unfollow discussion)
      parameters:
        - in: path
          name: followID
          description: Follow Discussion ID
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/accounts/{accountID}/follow_discussions':
    get:
      tags:
        - discussion
        - not implemented
      description: Get follow discussion
      parameters:
        - in: path
          name: accountID
          description: account ID
          required: true
          type: string
        - in: query
          name: individual-discussionId
          description: discussion Id
          required: true
          type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        200:
          description: Returns Follow Discussion
          schema:
            type: array
            items:
              $ref: '#/definitions/FollowingIndividualDiscussion'
  /discussions/create:
    post:
      tags:
        - discussion
        - live
        - has tests
      summary: Post a new discussion
      description: Post a new discussion to store in the database
      operationId: postDiscussion
      parameters:
        - in: body
          name: body
          description: Discussion object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/IndividualDiscussion'
      responses:
        '405':
          description: Invalid input
  '/profiles':
    post:
      tags:
        - profile
        - live
        - has tests
      description: Create a new user profile
      parameters:
        - in: body
          name: Profile
          description: Profile to be created
          required: false
          schema:
            $ref: '#/definitions/Profile'
      responses:
        '201':
          description: New user profile created
          schema:
            $ref: '#/definitions/Profile'
    get:
      tags:
        - profile
        - not implemented
      description: Get all user profiles
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
        - name: id
          in: query
          description: Select by profile id
          type: array
          items:
            type: string
          required: false
      responses:
        '200':
          description: send all user profiles
          schema:
            type: array
            items:
              $ref: '#/definitions/Profile'
  '/profiles/{profileID}':
    get:
      tags:
        - profile
        - live
        - has tests
      description: Get profile based on profileID
      parameters:
        - name: profileID
          in: path
          type: string
          description: ID of the profile
          required: true
      responses:
        '200':
          description: send the profile with profileID
          schema:
            $ref: '#/definitions/Profile'
    patch:
      tags:
        - profile
        - live
        - has tests
      description: Update information for profile by ID
      parameters:
        - name: profileID
          in: path
          type: string
          description: ID of the profile
          required: true
        - name: profile
          in: body
          schema:
            $ref: '#/definitions/Profile'
      responses:
        200:
          description: returns updated profile
          schema:
            $ref: '#/definitions/Profile'
    delete:
      tags:
        - profile
        - live
        - has tests
      description: Delete a profile by id
      parameters:
        - in: path
          name: profileID
          description: ID of profile to be deleted
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/profiles/{profileID}/profile_history':
    get:
      tags:
        - profile
        - not implemented
      description: Get the user activities history by profile ID
      parameters:
        - name: profileID
          in: path
          type: string
          description: ID of the profile
          required: true
        - name: section
          in: query
          type: string
          enum:
            - mutual
            - public
          description: filter result by section
          required: false
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
      responses:
        '200':
          description: send user activities history
          schema:
            type: array
            items:
              $ref: '#/definitions/ProfileHistory'
  '/profiles/{profileID}/profile_reviews':
    get:
      tags:
        - profile
        - not implemented
      summary: Get reviews for a member profile
      description: Get profile reviews based on profileID
      parameters:
        - name: profileID
          in: path
          type: string
          description: ID of the profile
          required: true
        - in: query
          name: reviewId
          description: Id review profile
          required: true
          type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter (date, like, rating)
          type: string
          required: false
        - name: rating
          in: query
          description: Sort by rating
          type: integer
          required: false
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        - name: status
          in: query
          description: Sort by verified user
          type: boolean
          required: false
      responses:
        '200':
          description: send the reviews with profileID
          schema:
            type: array
            items:
              $ref: '#/definitions/ProfileReview'
  '/profile_reviews':
    post:
      tags:
        - profile
        - not implemented
      description: Added new review or reply profile
      parameters:
        - in: body
          name: body
          description: Review object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/ProfileReview'
      responses:
        '201':
          description: return reviews profile
          schema:
            $ref: '#/definitions/ProfileReview'
  '/profile_reviews/{reviewId}':
    get:
      tags:
        - profile
        - not implemented
      description: Get profile review by id
      parameters:
        - name: reviewId
          in: path
          type: string
          description: ID of the review
          required: true
      responses:
        '200':
          description: send the review by id
          schema:
            $ref: '#/definitions/ProfileReview'
    patch:
      tags:
        - profile
        - not implemented
      description: Update profile review
      parameters:
        - name: reviewId
          in: path
          type: string
          description: ID of the review
          required: true
        - name: Review
          in: body
          schema:
            $ref: '#/definitions/ProfileReview'
      responses:
        200:
          description: returns updated profile review
          schema:
            $ref: '#/definitions/ProfileReview'
  '/profile_reviews_helpful':
    get:
      tags:
        - profile
        - not implemented
      description: Get profile review helpful
      parameters:
        - in: query
          name: reviewId
          description: Id iprofile review
          required: true
          type: string
        - in: query
          name: accountId
          description: Id account
          required: true
          type: string
      responses:
        '200':
          description: return profile review helpful
          schema:
            type: array
            items:
              $ref: '#/definitions/ProfileReviewHelpful'
    post:
      tags:
        - profile
        - not implemented
      description: Create profile review helpful
      parameters:
        - in: body
          name: ProfileReviewHelpful
          description: profile review helpful
          required: false
          schema:
            $ref: '#/definitions/ProfileReviewHelpful'
      responses:
        '201':
          description: New profile review helpful
          schema:
            $ref: '#/definitions/ProfileReviewHelpful'
  '/profile_reviews_flagged':
    get:
      tags:
        - profile
        - not implemented
      description: Get profile review flagged
      parameters:
        - in: query
          name: reviewId
          description: Id iprofile review
          required: true
          type: string
        - in: query
          name: accountId
          description: Id account
          required: true
          type: string
      responses:
        '200':
          description: return profile review flagged
          schema:
            type: array
            items:
              $ref: '#/definitions/ProfileReviewFlagged'
    post:
      tags:
        - profile
        - not implemented
      description: Create profile review flagged
      parameters:
        - in: body
          name: ProfileReviewFlagged
          description: profile review flagged
          required: false
          schema:
            $ref: '#/definitions/ProfileReviewFlagged'
      responses:
        '201':
          description: New profile review flagged
          schema:
            $ref: '#/definitions/ProfileReviewFlagged'
  '/profile_reviews_helpful/{helpfulID}':
    patch:
      tags:
        - profile
        - not implemented
      description: Update profile review helpful
      parameters:
        - name: helpfulID
          in: path
          type: string
          description: ID of the helpful
          required: true
        - name: helpful
          in: body
          schema:
            $ref: '#/definitions/ProfileReviewHelpful'
      responses:
        200:
          description: returns updated profile review helpful
          schema:
            $ref: '#/definitions/ProfileReviewHelpful'
  '/companies':
    get:
      tags:
        - onboarding
        - company
        - live
        - has tests
      description: Get all Companies
      responses:
        '200':
          description: Send all Companies
          schema:
            type: array
            items:
              $ref: '#/definitions/Company'
  '/companies/{companyID}':
    get:
      tags:
        - company
        - live
        - has tests
      summary: Get information for a company profile
      description: Get profile based on companyID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
      responses:
        '200':
          description: send the company profile with companyID
          schema:
            $ref: '#/definitions/Company'
    patch:
      tags:
        - company
        - not implemented
      description: Update information for company profile by ID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
        - name: company
          in: body
          schema:
            $ref: '#/definitions/Company'
      responses:
        200:
          description: returns updated company profile
          schema:
            $ref: '#/definitions/Company'
  '/companies/{companyID}/company_images':
    get:
      tags:
        - company
        - not implemented
      summary: Get company profile images
      description: Get company profile images based on companyID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
      responses:
        '200':
          description: send the profile images with companyID
          schema:
            type: array
            items:
              $ref: '#/definitions/CompanyImage'
  '/companies/{companyID}/company_members':
    get:
      tags:
        - company
        - not implemented
      description: Get company members based on companyID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
      responses:
        '200':
          description: send members in a company
          schema:
            type: array
            items:
              $ref: '#/definitions/CompanyMember'
  '/companies/{companyID}/company_history':
    get:
      tags:
        - company
        - not implemented
      description: Get company history based on companyID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
      responses:
        '200':
          description: send history for a company
          schema:
            type: array
            items:
              $ref: '#/definitions/CompanyHistory'
  '/company_images/{imageID}':
    patch:
      tags:
        - company
        - not implemented
      description: Update company image by ID
      parameters:
        - name: imageID
          in: path
          type: string
          description: ID of the company image
          required: true
        - name: image
          in: body
          schema:
            $ref: '#/definitions/CompanyImage'
      responses:
        200:
          description: returns updated company image
          schema:
            $ref: '#/definitions/CompanyImage'
  '/companies/{companyID}/company_videos':
    get:
      tags:
        - company
        - live
        - has tests
      summary: Get company profile videos
      description: Get company profile videos based on companyID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
      responses:
        '200':
          description: send the profile videos with companyID
          schema:
            type: array
            items:
              $ref: '#/definitions/CompanyVideo'
  '/companies/{companyID}/company_skills':
    get:
      tags:
        - company
        - live
        - has tests
      summary: Get company profile skill
      description: Get company profile skill based on companyID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
      responses:
        '200':
          description: send the profile skill with companyID
          schema:
            type: array
            items:
              $ref: '#/definitions/CompanySkill'
  '/companies/{companyID}/company_key_contacts':
    get:
      tags:
        - company
        - live
        - has tests
      summary: Get company profile contacts
      description: Get company profile contacts based on companyID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
      responses:
        '200':
          description: send the profile contacts with companyID
          schema:
            type: array
            items:
              $ref: '#/definitions/CompanyKeyContact'
  '/companies/{companyID}/company_skill_images':
    get:
      tags:
        - company
        - not implemented
      summary: Get company profile skill images
      description: Get company profile skill images based on companyID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
      responses:
        '200':
          description: send the profile skill images with companyID
          schema:
            type: array
            items:
              $ref: '#/definitions/CompanySkillImage'
  '/company_skill_images/{imageID}':
    patch:
      tags:
        - company
        - not implemented
      description: Update company skill image by ID
      parameters:
        - name: imageID
          in: path
          type: string
          description: ID of the company skill image
          required: true
        - name: image
          in: body
          schema:
            $ref: '#/definitions/CompanySkillImage'
      responses:
        200:
          description: returns updated company skill image
          schema:
            $ref: '#/definitions/CompanySkillImage'
  '/companies/{companyID}/company_reviews':
    get:
      tags:
        - company
        - not implemented
      summary: Get reviews for a company
      description: Get company reviews based on companyID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
        - in: query
          name: reviewId
          description: Id review company
          required: true
          type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter (date, like, rating)
          type: string
          required: false
        - name: rating
          in: query
          description: Sort by rating
          type: integer
          required: false
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        - name: status
          in: query
          description: Sort by verified user
          type: boolean
          required: false
      responses:
        '200':
          description: send the reviews with companyID
          schema:
            type: array
            items:
              $ref: '#/definitions/CompanyReview'
  '/company_reviews':
    post:
      tags:
        - company
        - not implemented
      description: Added new review or reply company
      parameters:
        - in: body
          name: body
          description: Review object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/CompanyReview'
      responses:
        '201':
          description: return reviews company
          schema:
            $ref: '#/definitions/CompanyReview'
  '/company_reviews_helpful':
    get:
      tags:
        - company
        - not implemented
      description: Get company review helpful
      parameters:
        - in: query
          name: reviewId
          description: Id company review
          required: true
          type: string
        - in: query
          name: accountId
          description: Id account
          required: true
          type: string
      responses:
        '200':
          description: return company review helpful
          schema:
            type: array
            items:
              $ref: '#/definitions/CompanyReviewHelpful'
    post:
      tags:
        - company
        - not implemented
      description: Create company review helpful
      parameters:
        - in: body
          name: CompanyReviewHelpful
          description: company review helpful
          required: false
          schema:
            $ref: '#/definitions/CompanyReviewHelpful'
      responses:
        '201':
          description: New company review helpful
          schema:
            $ref: '#/definitions/CompanyReviewHelpful'
  '/company_reviews_helpful/{helpfulID}':
    patch:
      tags:
        - company
        - not implemented
      description: Update company review helpful
      parameters:
        - name: helpfulID
          in: path
          type: string
          description: ID of the helpful
          required: true
        - name: helpful
          in: body
          schema:
            $ref: '#/definitions/CompanyReviewHelpful'
      responses:
        200:
          description: returns updated company review helpful
          schema:
            $ref: '#/definitions/CompanyReviewHelpful'
  '/company_reviews_flagged':
    get:
      tags:
        - company
        - not implemented
      description: Get company review flagged
      parameters:
        - in: query
          name: reviewId
          description: Id company review
          required: true
          type: string
        - in: query
          name: accountId
          description: Id account
          required: true
          type: string
      responses:
        '200':
          description: return company review flagged
          schema:
            type: array
            items:
              $ref: '#/definitions/CompanyReviewFlagged'
    post:
      tags:
        - company
        - not implemented
      description: Create company review flagged
      parameters:
        - in: body
          name: CompanyReviewFlagged
          description: company review flagged
          required: false
          schema:
            $ref: '#/definitions/CompanyReviewFlagged'
      responses:
        '201':
          description: New company review helpful
          schema:
            $ref: '#/definitions/CompanyReviewFlagged'
  '/companies/{companyID}/company_services':
    get:
      tags:
        - company
        - service
        - not implemented
      description: Get company services based on companyID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _start
          in: query
          description: Offset
          type: integer
          required: false
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
        - name: title_like
          in: query
          description: Search by service title
          type: string
          required: false
        - name: serviceType
          in: query
          description: Filter by service type (for service)
          type: string
          required: false
          collectionFormat: multi
          enum:
            - analytical
            - solid
            - data
        - name: _authors
          in: query
          description: Filter by author
          type: array
          items:
            type: integer
          required: false
        - name: _ratings
          in: query
          description: Filter by rating
          type: array
          items:
            type: string
          required: false
        - name: _favorites
          in: query
          description: Filter by favorite items
          type: string
          required: false
        - name: _dates
          in: query
          description: Filter by date (7d - 7 days old, 1m - 1 month old, 1y - 1 year old)
          type: array
          items:
            type: string
          required: false
          collectionFormat: multi
          enum:
            - 7d
            - 1m
            - 1y
      responses:
        '200':
          description: send the services with companyID
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
  '/companies/{companyID}/company_components':
    get:
      tags:
        - company
        - component
        - not implemented
      description: Get company components based on companyID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _start
          in: query
          description: Offset
          type: integer
          required: false
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
        - name: title_like
          in: query
          description: Search by service title
          type: string
          required: false
        - name: serviceType
          in: query
          description: Filter by service type (for service)
          type: string
          required: false
          collectionFormat: multi
          enum:
            - analytical
            - solid
            - data
        - name: _authors
          in: query
          description: Filter by author
          type: array
          items:
            type: integer
          required: false
        - name: _ratings
          in: query
          description: Filter by rating
          type: array
          items:
            type: string
          required: false
        - name: _favorites
          in: query
          description: Filter by favorite items
          type: string
          required: false
        - name: _dates
          in: query
          description: Filter by date (7d - 7 days old, 1m - 1 month old, 1y - 1 year old)
          type: array
          items:
            type: string
          required: false
          collectionFormat: multi
          enum:
            - 7d
            - 1m
            - 1y
      responses:
        '200':
          description: send the components with companyID
          schema:
            type: array
            items:
              $ref: '#/definitions/Component'
  '/companies/{companyID}/company_featured':
    get:
      tags:
        - company
        - not implemented
      summary: Get featured products for a company
      description: Get company featured products based on companyID
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
        - name: _order
          in: query
          description: Order by DESC
          type: string
          collectionFormat: multi
          required: true
          enum:
            - DESC
        - name: _sort
          in: query
          description: Sort by position
          type: string
          required: true
          collectionFormat: multi
          enum:
            - position
      responses:
        '200':
          description: send an object with featured products based on companyID
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceFeatured'
  '/companies/{companyID}/new':
    get:
      tags:
        - company
        - not implemented
      description: Get new company services
      parameters:
        - name: companyID
          in: path
          type: string
          description: ID of the company
          required: true
        - name: _order
          in: query
          description: Order by DESC
          type: string
          collectionFormat: multi
          required: true
          enum:
            - DESC
        - name: _sort
          in: query
          description: Sort by id
          type: string
          required: true
        - name: _limit
          in: query
          description: Limit services
          type: string
          required: true
      responses:
        '200':
          description: send an object with new services based on companyID
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
  '/company_skills':
    post:
      tags:
        - company
        - live
        - has tests
      summary: Post a new company skill
      description: Post a new company skill
      parameters:
        - in: body
          name: CompanySkill
          description: skill object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/CompanySkill'
      responses:
        '201':
          description: new skill added to the database
          schema:
            $ref: '#/definitions/CompanySkill'
  '/company_skills/{skillID}':
    delete:
      tags:
        - company
        - live
        - has tests
      description: Delete a skill by id
      parameters:
        - in: path
          name: skillID
          description: ID of skill to be deleted
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/company_videos':
    post:
      tags:
        - company
        - live
        - has tests
      summary: Post a new company video
      description: Post a new company video
      parameters:
        - in: body
          name: body
          description: Video object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/CompanyVideo'
      responses:
        '201':
          description: new video added to the database
          schema:
            $ref: '#/definitions/CompanyVideo'
  '/company_videos/{videoID}':
    delete:
      tags:
        - company
        - live
        - has tests
      description: Delete a video by id
      parameters:
        - in: path
          name: videoID
          description: ID of video to be deleted
          required: true
          type: string
      responses:
        '200':
          description: OK
    patch:
      tags:
        - company
        - live
        - has tests
      description: Update company videos by ID
      parameters:
        - name: videoID
          in: path
          type: string
          description: ID of the company video
          required: true
        - name: video
          in: body
          schema:
            $ref: '#/definitions/CompanyVideo'
      responses:
        200:
          description: returns updated company video
          schema:
            $ref: '#/definitions/CompanyVideo'
  '/company_key_contacts':
    post:
      tags:
        - company
        - live
        - has tests
      summary: Post a new company contact
      description: Post a new company contact
      parameters:
        - in: body
          name: body
          description: contact object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/CompanyKeyContact'
      responses:
        '201':
          description: new contact added to the database
          schema:
            $ref: '#/definitions/CompanyKeyContact'
  '/company_key_contacts/{contactID}':
    delete:
      tags:
        - company
        - live
        - has tests
      description: Delete a contact by id
      parameters:
        - in: path
          name: contactID
          description: ID of contact to be deleted
          required: true
          type: string
      responses:
        '200':
          description: OK
    patch:
      tags:
        - company
        - live
        - has tests
      description: Update company contact by ID
      parameters:
        - name: contactID
          in: path
          type: string
          description: ID of the company contact
          required: true
        - name: contact
          in: body
          schema:
            $ref: '#/definitions/CompanyKeyContact'
      responses:
        200:
          description: returns updated company contact
          schema:
            $ref: '#/definitions/CompanyKeyContact'
  '/company/follow':
    post:
      tags:
        - company
        - not implemented
      description: Follow company
      parameters:
        - name: accountId
          type: integer
          description: User account id
          in: query
          required: true
        - name: companyId
          type: integer
          description: Company id
          in: query
          required: true
      responses:
        '201':
          description: New followed company
          schema:
            type: object
            properties:
              id:
                type: integer
              accountId:
                type: integer
              companyId:
                type: integer
  '/company/unfollow/{followed_companiId}':
    delete:
      tags:
        - company
        - not implemented
      description: Unfollow company
      parameters:
        - in: path
          name: followed_companiId
          type: integer
          description: Followed company id
          required: true
      responses:
        '200':
          description: OK
  '/company_featured/{company_featuredId}/position':
    patch:
      tags:
        - company
        - not implemented
      description: Update featured position
      parameters:
        - in: path
          name: company_featuredId
          type: integer
          description: Company id
          required: true
        - in: query
          name: position
          type: integer
          description: new company featured position
          required: true
      responses:
        '202':
          description: Updated featured company
          schema:
            type: object
            properties:
              id:
                type: integer
              companyId:
                type: integer
              position:
                type: integer
              serviceId:
                type: integer
  '/company_featured/add':
    post:
      tags:
        - company
        - not implemented
      description: Added new featured company
      parameters:
        - in: query
          name: companyId
          type: integer
          description: Company id
          required: true
        - in: query
          name: position
          type: integer
          description: Featured position
          required: true
        - in: query
          name: serviceId
          type: integer
          description: Service id
          required: true
      responses:
        '201':
          description: New featured company
          schema:
            type: object
            properties:
              id:
                type: integer
              companyId:
                type: integer
              position:
                type: integer
              serviceId:
                type: integer
  '/company_featured/{company_featuredId}':
    delete:
      tags:
        - company
        - not implemented
      description: Delete featured company
      parameters:
        - in: path
          name: company_featuredId
          type: integer
          description: Featured company id
          required: true
      responses:
        '200':
          description: OK
  '/market/popular_services':
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: Get popular services in marketplace
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _start
          in: query
          description: Offset
          type: integer
          required: false
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
      responses:
        '200':
          description: return popular services in marketplace
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
  '/market/new_services':
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: Get latest services in marketplace
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _start
          in: query
          description: Offset
          type: integer
          required: false
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
      responses:
        '200':
          description: return latest services in marketplace
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
  '/market/services':
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: Get all services in marketplace
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _start
          in: query
          description: Offset
          type: integer
          required: false
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
        - name: title_like
          in: query
          description: Search by service title
          type: string
          required: false
        - name: serviceType
          in: query
          description: Filter by service type (for service)
          type: string
          required: false
          collectionFormat: multi
          enum:
            - analytical
            - solid
            - data
        - name: _authors
          in: query
          description: Filter by author
          type: array
          items:
            type: integer
          required: false
        - name: _ratings
          in: query
          description: Filter by rating
          type: array
          items:
            type: string
          required: false
        - name: _favorites
          in: query
          description: Filter by favorite items
          type: string
          required: false
        - name: _dates
          in: query
          description: Filter by date (7d - 7 days old, 1m - 1 month old, 1y - 1 year old)
          type: array
          items:
            type: string
          required: false
          collectionFormat: multi
          enum:
            - 7d
            - 1m
            - 1y
      responses:
        '200':
          description: return all services in marketplace
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
  '/market/components':
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: Get all components in marketplace
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _start
          in: query
          description: Offset
          type: integer
          required: false
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
        - name: title_like
          in: query
          description: Search by service title
          type: string
          required: false
        - name: serviceType
          in: query
          description: Filter by service type (for service)
          type: string
          required: false
          collectionFormat: multi
          enum:
            - analytical
            - solid
            - data
        - name: _authors
          in: query
          description: Filter by author
          type: array
          items:
            type: integer
          required: false
        - name: _ratings
          in: query
          description: Filter by rating
          type: array
          items:
            type: string
          required: false
        - name: _favorites
          in: query
          description: Filter by favorite items
          type: string
          required: false
        - name: _dates
          in: query
          description: Filter by date (7d - 7 days old, 1m - 1 month old, 1y - 1 year old)
          type: array
          items:
            type: string
          required: false
          collectionFormat: multi
          enum:
            - 7d
            - 1m
            - 1y
      responses:
        '200':
          description: return all components in marketplace
          schema:
            type: array
            items:
              $ref: '#/definitions/Component'
  '/product/{service_Id}/product_reviews':
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: Get all reviews service in marketplace
      parameters:
        - in: path
          name: service_Id
          type: string
          description: Service id in marketplace
          required: true
        - in: query
          name: reviewId
          description: Id review service
          required: true
          type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter (date, like, rating)
          type: string
          required: false
        - name: rating
          in: query
          description: Sort by rating
          type: integer
          required: false
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        - name: status
          in: query
          description: Sort by verified user
          type: boolean
          required: false
      responses:
        '200':
          description: return reviews service in marketplace
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductReview'
  '/product_reviews':
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: Get latest review service in marketplace
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
      responses:
        '200':
          description: return latest review service in marketplace
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductReview'
    post:
      tags:
        - service
        - marketplace
        - not implemented
      description: Added new review or reply service in marketplace
      parameters:
        - in: body
          name: body
          description: Review object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/ProductReview'
      responses:
        '201':
          description: return reviews service in marketplace
          schema:
            $ref: '#/definitions/ProductReview'
  '/product_reviews/{reviewId}':
    patch:
      tags:
        - service
        - marketplace
        - not implemented
      description: Update service review
      parameters:
        - name: reviewId
          in: path
          type: string
          description: ID of the review
          required: true
        - name: review
          in: body
          schema:
            $ref: '#/definitions/ProductReview'
      responses:
        200:
          description: returns updated service review
          schema:
            $ref: '#/definitions/ProductReview'
  '/product_reviews_helpful':
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: Get service review helpful
      parameters:
        - in: query
          name: reviewId
          description: Id service review
          required: true
          type: string
        - in: query
          name: accountId
          description: Id account
          required: true
          type: string
      responses:
        '200':
          description: return service review helpful
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductReviewHelpful'
    post:
      tags:
        - service
        - marketplace
        - not implemented
      description: Create service review helpful
      parameters:
        - in: body
          name: ServiceReviewHelpful
          description: service review helpful
          required: false
          schema:
            $ref: '#/definitions/ProductReviewHelpful'
      responses:
        '201':
          description: New service review helpful
          schema:
            $ref: '#/definitions/ProductReviewHelpful'
  '/product_reviews_helpful/{helpfulID}':
    patch:
      tags:
        - service
        - marketplace
        - not implemented
      description: Update service review helpful
      parameters:
        - name: helpfulID
          in: path
          type: string
          description: ID of the helpful
          required: true
        - name: helpful
          in: body
          schema:
            $ref: '#/definitions/ProfileReviewHelpful'
      responses:
        200:
          description: returns updated service review helpful
          schema:
            $ref: '#/definitions/ProductReviewHelpful'
  '/product_reviews_flagged':
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: Get service review flagged
      parameters:
        - in: query
          name: reviewId
          description: Id service review
          required: true
          type: string
        - in: query
          name: accountId
          description: Id account
          required: true
          type: string
      responses:
        '200':
          description: return service review flagged
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductReviewFlagged'
    post:
      tags:
        - service
        - marketplace
        - not implemented
      description: Create service review flagged
      parameters:
        - in: body
          name: ServiceReviewHelpful
          description: service review flagged
          required: false
          schema:
            $ref: '#/definitions/ProductReviewFlagged'
      responses:
        '201':
          description: New service review flagged
          schema:
            $ref: '#/definitions/ProductReviewFlagged'
  '/service_authors/{autorhId}':
    delete:
      tags:
        - service
        - marketplace
        - not implemented
      description: Remove  with service author
      parameters:
        - in: path
          name: autorhId
          type: integer
          required: true
      responses:
        '200':
          description: OK
  '/service_authors':
    post:
      tags:
        - service
        - marketplace
        - not implemented
      description: Add new service author
      parameters:
        - in: body
          name: author
          required: true
          schema:
            $ref: '#/definitions/ServiceAuthor'
      responses:
        '201':
          description: return new service author
          schema:
            $ref: '#/definitions/ServiceAuthor'
  '/array_specifications':
    get:
      tags:
        - service
        - marketplace
        - live
        - has tests
      description: Get array of specifications for services
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
      responses:
        '200':
          description: return array of specifications for services
          schema:
            type: array
            items:
              $ref: '#/definitions/ArraySpecifications'
    post:
      tags:
        - service
        - marketplace
        - live
        - has tests
      description: Add elements to array of specifications for services
      parameters:
        - in: body
          name: body
          description: array of specifications object to be added to the database
          required: false
          schema:
            $ref: '#/definitions/ArraySpecifications'
      responses:
        '200':
          description: return array of specifications for services
          schema:
            type: array
            items:
              $ref: '#/definitions/ArraySpecifications'
  '/follow-company-services':
    get:
      tags:
        - service
        - marketplace
        - not implemented
      description: Get all services from favorite storefronts
      parameters:
        - name: companyId
          in: query
          description: Array of favorite companies id
          type: array
          items:
            type: integer
          required: true
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _start
          in: query
          description: Offset
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
      responses:
        '200':
          description: return all services from favorite storefronts
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
  '/favorite_products/{favorite_productId}':
    delete:
      tags:
        - service
        - account
        - marketplace
        - not implemented
      description: Delete service from favorites
      parameters:
        - name: favorite_productId
          in: path
          description: Favorite product id
          type: integer
          required: true
      responses:
        '200':
          description: OK
  '/favorite_products':
    post:
      tags:
        - service
        - account
        - marketplace
        - not implemented
      description: Add service to favorites
      parameters:
        - name: accountId
          in: query
          description: Account id
          type: integer
          required: true
        - name: serviceId
          in: query
          description: Service id
          type: integer
          required: true
      responses:
        '201':
          description: New favorite service
          schema:
            type: object
            properties:
              id:
                type: integer
              accountId:
                type: integer
              serviceId:
                type: integer
  '/services/{serviceId}/input-positions':
    get:
      tags:
        - service
        - not implemented
      description: Get service inputs positions
      parameters:
        - name: serviceId
          in: path
          description: service id
          type: number
          required: true
      responses:
        '200':
          description: return service inputs positions
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceInputsPositions'
  '/input-positions/{positionInputId}':
    patch:
      tags:
        - service
        - not implemented
      description: Update service inputs positions
      parameters:
        - name: positionInputId
          in: path
          description: inputs position id
          type: number
          required: true
        - name: positions
          in: body
          description: Array of positions
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceInputPosition'
      responses:
        200:
          description: returns updated input positions
          schema:
            $ref: '#/definitions/ServiceInputsPositions'
    delete:
      tags:
        - service
        - not implemented
      description: Delete service inputs positions
      parameters:
        - name: positionInputId
          in: path
          description: inputs position id
          type: number
          required: true
      responses:
        '200':
          description: OK
  '/input-positions':
    post:
      tags:
        - service
        - not implemented
      description: Add new inputs positions
      parameters:
        - name: Inputs positions
          in: body
          description: Inputs positions
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/PostServiceInputPosition'
      responses:
        '201':
          description: Return new inputs positions
          schema:
            $ref: '#/definitions/ServiceInputsPositions'
  '/notifications-user':
    get:
      tags:
        - notification
        - not implemented
      description: Get all notifications for user
      parameters:
        - name: period
          in: query
          description: value filters result by period
          type: string
          collectionFormat: multi
          required: false
          enum:
            - today
            - week
            - month
        - name: event
          in: query
          description: value filters result by notification event
          type: string
          required: false
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return all notifications
          schema:
            type: array
            items:
              $ref: '#/definitions/UserNotification'
  '/notifications-user-statistic':
    get:
      tags:
        - notification
        - not implemented
      description: Get all notification statistics for User
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return all notification statistics
          schema:
            type: array
            items:
              $ref: '#/definitions/UserNotificationStat'
  '/notifications-pm':
    get:
      tags:
        - notification
        - not implemented
      description: Get all notifications for Project Manager
      parameters:
        - name: period
          in: query
          description: value filters result by period
          type: string
          collectionFormat: multi
          required: false
          enum:
            - today
            - week
            - month
        - name: event
          in: query
          description: value filters result by notification event
          type: string
          required: false
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return all notifications
          schema:
            type: array
            items:
              $ref: '#/definitions/UserNotification'
  '/notifications-pm-statistic':
    get:
      tags:
        - notification
        - not implemented
      description: Get all notification statistics for the Project Manager
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return all notification statistics
          schema:
            type: array
            items:
              $ref: '#/definitions/UserNotificationStat'
  '/announcements':
    get:
      tags:
        - community
        - not implemented
      description: Get all community announcements
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return all community announcements
          schema:
            type: array
            items:
              $ref: '#/definitions/CommunityAnnouncemnt'
  '/events':
    get:
      tags:
        - community
        - not implemented
      description: Get all community events
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return all community events
          schema:
            type: array
            items:
              $ref: '#/definitions/CommunityEvent'
  '/individual-discussion':
    get:
      tags:
        - discussion
        - community
        - not implemented
      description: Get all community individual discussions
      parameters:
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return all community individual discussions
          schema:
            type: array
            items:
              $ref: '#/definitions/IndividualDiscussion'
    post:
      tags:
        - discussion
        - community
        - not implemented
      description: Create a new individual discussions
      parameters:
        - in: body
          name: Discussion
          description: Individual discussions to be created
          required: false
          schema:
            $ref: '#/definitions/IndividualDiscussion'
      responses:
        '201':
          description: New individual discussion comment
          schema:
            $ref: '#/definitions/IndividualDiscussion'
  '/individual-discussion/{individualDiscussionID}/individual-discussion-comments':
    get:
      tags:
        - discussion
        - community
        - not implemented
      description: Get all individual discussions comments
      parameters:
        - in: path
          name: individualDiscussionID
          description: ID of individual discussions
          required: true
          type: string
        - in: query
          name: commentId
          description: Id comment of individual discussions comments
          required: true
          type: string
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter (id, title, etc.)
          type: string
          required: false
      responses:
        '200':
          description: return all all individual discussions comments
          schema:
            type: array
            items:
              $ref: '#/definitions/IndividualDiscussionComment'
  '/individual-discussion-comments':
    post:
      tags:
        - discussion
        - community
        - not implemented
      description: Create a new individual discussions comment
      parameters:
        - in: body
          name: DiscussionComment
          description: Individual discussions comment to be created
          required: false
          schema:
            $ref: '#/definitions/IndividualDiscussionComment'
      responses:
        '201':
          description: New individual discussion comment
          schema:
            $ref: '#/definitions/IndividualDiscussionComment'
  '/individual-discussion-comments/{commentID}':
    delete:
      tags:
        - discussion
        - community
        - not implemented
      description: Delete a individual discussions comment
      parameters:
        - in: path
          name: commentID
          description: ID of individual discussions comment
          required: true
          type: string
      responses:
        '200':
          description: OK
    patch:
      tags:
        - discussion
        - community
        - not implemented
      description: Update a individual discussions comment
      parameters:
        - name: commentID
          in: path
          type: string
          description: ID of the comment
          required: true
        - name: comment
          in: body
          schema:
            $ref: '#/definitions/IndividualDiscussionComment'
      responses:
        200:
          description: returns updated individual discussions comment
          schema:
            $ref: '#/definitions/IndividualDiscussionComment'
  '/individual-discussion/{individualDiscussionID}/individual-discussion-tags':
    get:
      tags:
        - discussion
        - community
        - not implemented
      description: Get all individual discussions tags
      parameters:
        - in: path
          name: individualDiscussionID
          description: ID of individual discussions
          required: true
          type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return all all individual discussions tags
          schema:
            type: array
            items:
              $ref: '#/definitions/IndividualDiscussionTag'
  '/individual-discussion-comments-helpful':
    get:
      tags:
        - discussion
        - community
        - not implemented
      description: Get individual discussions comment helpful
      parameters:
        - in: query
          name: commentId
          description: Id individual discussions comment
          required: true
          type: string
        - in: query
          name: accountId
          description: Id account
          required: true
          type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '200':
          description: return individual discussions comment helpful
          schema:
            type: array
            items:
              $ref: '#/definitions/IndividualDiscussionCommentHelpful'
    post:
      tags:
        - discussion
        - community
        - not implemented
      description: Create individual discussions comments helpful
      parameters:
        - in: body
          name: IndividualDiscussionCommentHelpful
          description: Individual comments helpful
          required: false
          schema:
            $ref: '#/definitions/IndividualDiscussionCommentHelpful'
      responses:
        '201':
          description: New individual discussions comments helpful
          schema:
            $ref: '#/definitions/IndividualDiscussionCommentHelpful'
  '/individual-discussion-comments-helpful/{helpfulID}':
    patch:
      tags:
        - discussion
        - community
        - not implemented
      description: Update a individual discussions comment helpful
      parameters:
        - name: helpfulID
          in: path
          type: string
          description: ID of the helpful
          required: true
        - name: helpful
          in: body
          schema:
            $ref: '#/definitions/IndividualDiscussionCommentHelpful'
      responses:
        200:
          description: returns updated individual discussions comment helpful
          schema:
            $ref: '#/definitions/IndividualDiscussionCommentHelpful'
  '/individual-discussion-comments-flagged':
    get:
      tags:
        - discussion
        - community
        - not implemented
      description: Get individual discussions comment flagged
      parameters:
        - in: query
          name: commentId
          description: Id individual discussions comment
          required: true
          type: string
        - in: query
          name: accountId
          description: Id account
          required: true
          type: string
      responses:
        '200':
          description: return individual discussions comment flagged
          schema:
            type: array
            items:
              $ref: '#/definitions/IndividualDiscussionCommentFlagged'
    post:
      tags:
        - discussion
        - community
        - not implemented
      description: Create individual discussions comments flagged
      parameters:
        - in: body
          name: IndividualDiscussionCommentFlagged
          description: Individual comments flagged
          required: false
          schema:
            $ref: '#/definitions/IndividualDiscussionCommentFlagged'
      responses:
        '201':
          description: New individual discussions comments flagged
          schema:
            $ref: '#/definitions/IndividualDiscussionCommentFlagged'
  '/individual-discussion-tags':
    post:
      tags:
        - discussion
        - community
        - not implemented
      description: Create a new individual discussions tag
      parameters:
        - in: body
          name: DiscussionTag
          description: Individual discussions tag to be created
          required: false
          schema:
            $ref: '#/definitions/IndividualDiscussionTag'
      responses:
        '201':
          description: New individual discussion tag
          schema:
            $ref: '#/definitions/IndividualDiscussionTag'
  '/individual-discussion-tags/{disscusionTagID}':
    delete:
      tags:
        - discussion
        - community
        - not implemented
      description: Delete a individual discussions tag
      parameters:
        - in: path
          name: disscusionTagID
          description: ID of individual discussions tag
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/faq_articles':
    get:
      tags:
        - FAQ
        - not implemented
      description: Return all FAQ articles
      parameters:
        - in: query
          name: title_like
          description: Search by title
          required: false
          type: string
        - in: query
          name: faq_subcategoryId
          description: Search by subcategory id
          required: false
          type: array
          items:
            type: string
        - in: query
          name: id_ne
          description: Select all except id_ne.
          required: false
          type: array
          items:
            type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '201':
          description: Return all FAQ articles from database
          schema:
            type: array
            items:
              $ref: '#/definitions/FaqArticle'
  '/faq_articles/{id}':
    get:
      tags:
        - FAQ
        - not implemented
      description: Get FAQ article by id
      parameters:
        - in: path
          name: id
          description: FAQ article id
          required: true
          type: string
      responses:
        '201':
          description: Return one FAQ article from database
          schema:
            $ref: '#/definitions/FaqArticle'
  '/faq_subcategories':
    get:
      tags:
        - FAQ
        - not implemented
      description: Return all FAQ subcategories
      parameters:
        - in: query
          name: title_like
          description: Search by title
          required: false
          type: string
        - in: query
          name: faq_categoryId
          description: Search by FAQ category
          required: false
          type: array
          items:
            type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '201':
          description: Return all FAQ subcategories from database
          schema:
            type: array
            items:
              $ref: '#/definitions/FaqSubcategory'
  '/faq_subcategories/{id}':
    get:
      tags:
        - FAQ
        - not implemented
      description: Get FAQ subcategory id
      parameters:
        - in: path
          name: id
          description: FAQ subcategory id
          required: true
          type: string
      responses:
        '201':
          description: Return one FAQ subcategory from database
          schema:
            $ref: '#/definitions/FaqSubcategory'
  '/faq_categories':
    get:
      tags:
        - FAQ
        - not implemented
      description: Return all FAQ categories
      parameters:
        - in: query
          name: title_like
          description: Search by title
          required: false
          type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '201':
          description: Return all FAQ categories from database
          schema:
            type: array
            items:
              $ref: '#/definitions/FaqCategory'
  '/faq_categories/{id}':
    get:
      tags:
        - FAQ
        - not implemented
      description: Get FAQ category id
      parameters:
        - in: path
          name: id
          description: FAQ category id
          required: true
          type: string
      responses:
        '201':
          description: Return one FAQ category from database
          schema:
            $ref: '#/definitions/FaqCategory'
  '/shared-services':
    post:
      tags:
        - service
        - not implemented
      description: Add new shared service
      parameters:
        - in: body
          name: body
          description: Data for add shared service
          required: true
          schema:
            $ref: '#/definitions/PostSharedService'
      responses:
        '201':
          description: Return shared service
          schema:
            $ref: '#/definitions/SharedService'
  '/shared-services/{id}':
    get:
      tags:
        - service
        - not implemented
      description: Get shared service
      parameters:
        - in: path
          name: id
          description: Shared service id
          required: true
          type: string
      responses:
        '201':
          description: Return shared service
          schema:
            $ref: '#/definitions/SharedService'
  '/accounts/{accountId}/following_members':
    get:
      tags:
        - account
        - company
        - not implemented
      description: Get all following members for account
      parameters:
        - in: path
          name: accountId
          description: account id
          type: string
          required: true
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '201':
          description: Return followed members
          schema:
            type: array
            items:
              $ref: '#/definitions/FollowingMemeber'
  '/profiles/{profileId}/following_members':
    get:
      tags:
        - profile
        - not implemented
      description: Get all following members for profile
      parameters:
        - in: path
          name: profileId
          description: profile id
          type: string
          required: true
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '201':
          description: Return followed members
          schema:
            type: array
            items:
              $ref: '#/definitions/FollowingMemeber'
  '/following_members':
    post:
      tags:
        - account
        - company
        - not implemented
      description: Add new followed member
      parameters:
        - in: body
          name: body
          description: Data for add new followed member
          required: true
          schema:
            $ref: '#/definitions/PostFollowingMemeber'
      responses:
        '201':
          description: Return followed member
          schema:
            $ref: '#/definitions/FollowingMemeber'
    get:
      tags:
        - account
        - company
        - not implemented
      description: Get all followed member
      parameters:
        - in: query
          name: accountId
          description: Get by account id
          required: false
          type: string
        - in: query
          name: id
          description: Get by id
          required: false
          type: string
        - in: query
          name: profileId
          description: Get by profile id
          required: false
          type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '201':
          description: Return followed items
          schema:
            type: array
            items:
              $ref: '#/definitions/FollowingMemeber'
  '/following_members/{id}':
    get:
      tags:
        - account
        - not implemented
      description: Get followed member
      parameters:
        - in: path
          name: id
          description: Followed member id
          required: true
          type: string
      responses:
        '201':
          description: Return followed member
          schema:
            $ref: '#/definitions/FollowingMemeber'
    delete:
      tags:
        - account
        - company
        - not implemented
      description: Delete followed member
      parameters:
        - in: path
          name: id
          description: Followed member id
          required: true
          type: string
      responses:
        '200':
          description: Ok
  '/search':
    get:
      tags:
        - search
        - service
        - project
        - live
        - has tests
      description: Search services and projects
      parameters:
        - in: query
          name: title_like
          description: Search by title
          required: false
          type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '201':
          description: Return object with services array and project array
          schema:
            type: object
            properties:
              services:
                type: array
                items:
                  $ref: '#/definitions/Service'
              projects:
                type: array
                items:
                  $ref: '#/definitions/Project'
  '/searchProjects':
    get:
      tags:
        - search
        - project
        - live
        - has tests
      description: Search projects
      parameters:
        - in: query
          name: title_like
          description: Search by title
          required: false
          type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
      responses:
        '201':
          description: Return array of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
  '/searchServices/{text}':
      get:
        tags:
          - search
          - service
        description: Search services by title
        parameters:
          - in: path
            name: text
            description: Search by title
            required: true
            type: string
          - name: _limit
            in: query
            description: Limit items
            type: integer
            required: false
          - name: _order
            in: query
            description: Order by ASC or DESC
            type: string
            collectionFormat: multi
            required: false
            enum:
              - ASC
              - DESC
          - name: _sort
            in: query
            description: Sort by some parameter
            type: string
            required: false
          - name: published
            in: query
            description: if true - return published services
            type: boolean
            required: false
        responses:
          '201':
            description: Return array of services
            schema:
              type: array
              items:
                $ref: '#/definitions/Service'
  '/searchServices':
    get:
      tags:
        - search
        - service
        - live
        - has tests
      description: Search services
      parameters:
        - in: query
          name: title_like
          description: Search by title
          required: false
          type: string
        - name: _limit
          in: query
          description: Limit items
          type: integer
          required: false
        - name: _order
          in: query
          description: Order by ASC or DESC
          type: string
          collectionFormat: multi
          required: false
          enum:
            - ASC
            - DESC
        - name: _sort
          in: query
          description: Sort by some parameter
          type: string
          required: false
        - name: published
          in: query
          description: if true - return published services
          type: boolean
          required: false
      responses:
        '201':
          description: Return array of services
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
definitions:
  PostFollowingMemeber:
    type: object
    properties:
      id:
        type: string
      accountId:
        type: string
      profileId:
        type: string
  FollowingMemeber:
    type: object
    properties:
      accountId:
        type: string
      profileId:
        type: string
  PostSharedService:
    type: object
    properties:
      accountId:
        type: string
      profileId:
        type: string
      serviceId:
        type: string
  SharedService:
    type: object
    properties:
      id:
        type: string
      accountId:
        type: string
      profileId:
        type: string
      serviceId:
        type: string
  FeatureImage:
    type: object
    properties:
      thumbnail:
        type: string
      large:
        type: string
  Tasks:
    type: object
    properties:
      totalItems:
        type: integer
      link:
        type: string
        description: it contains /projects/{projectID}/tasks, URL that returns JSON data of all project tasks.
  Discussions:
    type: object
    properties:
      totalItems:
        type: integer
      link:
        type: string
        description: it contains /projects/{projectID}/discussions, URL that returns JSON data for project specific blog discussion and live stream (e.g. anytime a service is ran, any new discussion, new services added, etc.)
  Services:
    type: object
    properties:
      totalItems:
        type: integer
      link:
        type: string
        description: it contains /projects/{projectID}/services, URL that returns JSON data of all services in a project.
  Components:
    type: object
    properties:
      totalItems:
        type: integer
      link:
        type: string
        description: it contains /projects/{projectID}/components, URL that returns JSON data of all components of the project.
  Project:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      projectManager:
        type: string
      projectManagerId:
        type: string
      companyId:
        type: string
      featureImage:
        $ref: '#/definitions/FeatureImage'
      images:
        type: string
      description:
        type: string
      dueDate:
        type: number
        format: milliseconds
      tasks:
        $ref: '#/definitions/Tasks'
      discussions:
        $ref: '#/definitions/Discussions'
      services:
        $ref: '#/definitions/Services'
      components:
        $ref: '#/definitions/Components'
      approvalOption:
        type: string
  ProjectMember:
    type: object
    properties:
      id:
        description: Unique id for the Project Member object.
        type: string
      profileId:
        description: Profile id of the invited member.
        type: string
      projectId:
        description: Project id of relevant project.
        type: string
      accept:
        description: true or false based on whether the invited member has accepted the invitation.
        type: boolean
      fromProfileId:
        description: Profile id of the member that sent out the invitation.
        type: string
      from:
        description: Name of the member that sent out the invitation.
        type: string
      date:
        description: Date when the invitation was sent out.
        type: number
        format: milliseconds
      removed:
        description: true - if admin removed user from team
        type: boolean
  SimplifiedProject:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
  Task:
    type: object
    description: "Priority: 1 - Critical, 2 - High, 3 - Medium, 4 - Low"
    properties:
      id:
        type: string
      title:
        type: string
      project:
        $ref: '#/definitions/SimplifiedProject'
      assignee:
        type: string
      assigneeId:
        type: string
      reporter:
        type: string
      reporterId:
        type: string
      dueDate:
        type: number
        format: milliseconds
      additionalDetails:
        type: string
      status:
        type: string
        enum:
          - Open
          - InProgress
          - Completed
      priority:
        type: number
        enum:
            - 1
            - 2
            - 3
            - 4
  CurrentStatus:
    type: object
    properties:
      id:
        type: string
      status:
        type: number
      accountId:
        type: string
      runBy:
        type: string
      serviceId:
        type: string
      percentCompleted:
        type: number
      startDate:
        type: string
        format: date
      startTime:
        type: string
        format: time
      stopDate:
        type: string
        format: date
      stopTime:
        type: string
        format: time
      project:
        $ref: '#/definitions/SimplifiedProject'
      interface:
        $ref: '#/definitions/Interface'
  Interface:
    type: object
    properties:
      inParams:
        type: object
        properties:
          inputName1:
            $ref: '#/definitions/inputOutputParameter'
          inputName2:
            $ref: '#/definitions/inputOutputParameter'
          inputName3:
            $ref: '#/definitions/inputOutputParameter'
          inputName4:
            $ref: '#/definitions/inputOutputParameter'
      outParams:
        type: object
        properties:
          outputName1:
            $ref: '#/definitions/inputOutputParameter'
          outputName2:
            $ref: '#/definitions/inputOutputParameter'
  inputOutputParameter:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      unit:
        type: string
      category:
        type: string
      value:
        type: number
      parameterid:
        type: string
  Service:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      title:
        type: string
      description:
        type: string
      owner:
        type: string
      profileId:
        type: string
      releaseDate:
        type: string
        format: date-time
      serviceType:
        type: string
      tags:
        type: array
        items:
          type: string
      specifications:
        type: string
      featureImage:
        $ref: '#/definitions/FeatureImage'
      currentStatus:
        $ref: '#/definitions/CurrentStatus'
      projectId:
        type: string
      from:
        type: string
      type:
        type: string
      parent:
        type: string
      published:
        type: boolean
      averageRun:
        type: string
  ServiceImages:
    type: object
    properties:
      id:
        type: string
      serviceId:
        type: string
      url:
        type: string
  ServiceFeatured:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      position:
        type: integer
      serviceId:
        type: string
      service:
        type: object
        properties:
          id:
            type: string
          title:
            type: string
          description:
            type: string
          owner:
            type: string
          releaseDate:
            type: string
            format: date-time
          serviceType:
            type: string
          tags:
            type: array
            items:
              type: string
          specifications:
            type: string
          featureImage:
            $ref: '#/definitions/FeatureImage'
          currentStatus:
            $ref: '#/definitions/CurrentStatus'
          projectId:
            type: string
          from:
            type: string
          type:
            type: string
          favorite:
            type: boolean
          featureId:
            type: string
          position:
            type: integer
          inFeatured:
            type: boolean
  RunStats:
    type: object
    properties:
      success:
        type: number
      fail:
        type: number
  UsageStats:
    type: object
    properties:
      added:
        type: number
      members:
        type: number
  ArraySpecifications:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
  ServiceSpecifications:
    type: object
    properties:
      id:
        type: string
      serviceId:
        type: string
      description:
        type: string
      input:
        type: number
      output:
        type: number
      special:
        type: array
        items:
          $ref: '#/definitions/ServiceSpecialSpecifications'
      usageStats:
        $ref: '#/definitions/UsageStats'
      runStats:
        $ref: '#/definitions/RunStats'
  ServiceSpecialSpecifications:
    type: object
    properties:
      specification:
        type: string
      data:
        type: string
      specificationId:
        type: string
  Component:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      description:
        type: string
      owner:
        type: string
      releaseDate:
        type: string
        format: date-time
      tags:
        type: array
        items:
          type: string
      featureImage:
        $ref: '#/definitions/FeatureImage'
      services:
        type: array
        items:
          $ref: '#/definitions/Service'
      projectId:
        type: string
      type:
        type: string
  Profile:
    type: object
    properties:
      id:
        type: string
      displayName:
        type: string
      company:
        type: string
      companyId:
        type: string
      jobTitle:
        type: string
      phone:
        type: string
      email:
        type: string
      location:
        type: string
      image:
        type: string
      description:
        type: string
      skills:
        type: array
        items:
          type: string
  ProfileHistory:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      title:
        type: string
      date:
        type: string
        format: dateTime
      profileId:
        type: string
      user:
        type: string
      link:
        type: string
      section:
        type: string
        enum:
          - public
          - mutual
      period:
        type: string
        enum:
          - today
          - week
      type:
          type: string
          enum:
            - completed
            - rated
            - added
            - worked
  ProfileReview:
    type: object
    properties:
      id:
        type: string
      profileId:
        type: string
      name:
        type: string
      reply:
        type: boolean
      reviewId:
        type: string
      status:
        type: boolean
      date:
        type: number
        format: milliseconds
      rating:
        type: integer
      like:
        type: integer
      dislike:
        type: integer
      comment:
        type: string
      accountId:
        type: string
  ProfileReviewHelpful:
    type: object
    properties:
      id:
        type: string
      reviewId:
        type: string
      accountId:
        type: string
      helpfull:
        type: boolean
  ProfileReviewFlagged:
    type: object
    properties:
      id:
        type: string
      reviewId:
        type: string
      accountId:
        type: string
  ProductReview:
    type: object
    properties:
      id:
        type: string
      productId:
        type: string
      productType:
        type: string
        enum:
          - services
          - components
      reply:
        type: boolean
      reviewId:
        type: string
      name:
        type: string
      status:
        type: boolean
      date:
        type: number
        format: milliseconds
      rating:
        type: integer
      like:
        type: integer
      dislike:
        type: integer
      comment:
        type: string
      accountId:
        type: string
  ProductReviewHelpful:
    type: object
    properties:
      id:
        type: string
      reviewId:
        type: string
      accountId:
        type: string
      helpfull:
        type: boolean
  ProductReviewFlagged:
    type: object
    properties:
      id:
        type: string
      reviewId:
        type: string
      accountId:
        type: string
  Company:
    type: object
    properties:
      id:
        type: string
      accountId:
        type: string
      name:
        type: string
      location:
        type: string
      description:
        type: string
      division:
        type: string
      industry:
        type: string
      NAICSCode:
        type: string
      RDFocus:
        type: string
      customers:
        type: string
      awardsReceived:
        type: string
      technicalExpertise:
        type: string
      toolsSoftwareEquipmentMachines:
        type: string
      pastCollaborations:
        type: string
      collaborationInterests:
        type: string
      pastProjects:
        type: string
      upcomingProjectInterests:
        type: string
      address:
        type: string
      city:
        type: string
      state:
        type: integer
      zipCode:
        type: string
      twitter:
        type: string
      linkedIn:
        type: string
      website:
        type: string
      methodCommunication:
        type: string
      email:
        type: string
      phone:
        type: string
      categoryTier:
        type: integer
      dateJoined:
        type: string
      reasonJoining:
        type: string
      featureImage:
        $ref: "#/definitions/FeatureImage"
      logoImage:
        type: string
      follow:
        type: boolean
      favoritesCount:
        type: integer
      isOwner:
        type: boolean
      owner:
        type: object
  CompanyReview:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      name:
        type: string
      reply:
        type: boolean
      reviewId:
        type: string
      status:
        type: boolean
      date:
        type: number
        format: milliseconds
      rating:
        type: integer
      like:
        type: integer
      dislike:
        type: integer
      comment:
        type: string
      accountId:
        type: string
  CompanyReviewHelpful:
    type: object
    properties:
      id:
        type: string
      reviewId:
        type: string
      accountId:
        type: string
      helpfull:
        type: boolean
  CompanyReviewFlagged:
    type: object
    properties:
      id:
        type: string
      reviewId:
        type: string
      accountId:
        type: string
  CompanyImage:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      url:
        type: string
      title:
        type: string
  CompanyMember:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      profileId:
        type: string
  CompanyVideo:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      title:
        type: string
      link:
        type: string
  CompanySkillImage:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      url:
        type: string
      title:
        type: string
  CompanySkill:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      name:
        type: string
  CompanyKeyContact:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      type:
        type: integer
      name:
        type: string
      phoneNumber:
        type: string
      title:
        type: string
      email:
        type: string
  ProjectDocument:
    type: object
    properties:
      id:
        type: string
      projectId:
        type: string
      project-documentId:
        type: string
      owner:
        type: string
      ownerId:
        type: string
      file:
        type: string
      title:
        type: string
      modifed:
        type: string
        format: dateTime
      size:
        type: string
  ServiceAuthor:
    type: object
    properties:
      id:
        type: string
      serviceId:
        type: string
      display_name:
        type: string
      jobTitle:
        type: string
      follow:
        type: boolean
      avatar:
        type: string
      company:
        type: string
  ServiceStatsItem:
    type: object
    properties:
      today:
        type: number
      week:
        type: number
      all:
        type: number
  ServiceStats:
    type: object
    properties:
      id:
        type: string
      serviceId:
        type: string
      success_rate:
        $ref: '#/definitions/ServiceStatsItem'
      successful_runs:
        $ref: '#/definitions/ServiceStatsItem'
      incomplete_runs:
        $ref: '#/definitions/ServiceStatsItem'
      unavailable_runs:
        $ref: '#/definitions/ServiceStatsItem'
      runs_by_users:
        $ref: '#/definitions/ServiceStatsItem'
      unique_users:
        $ref: '#/definitions/ServiceStatsItem'
      average_time:
        $ref: '#/definitions/ServiceStatsItem'
  ServiceTag:
    type: object
    properties:
      id:
        type: string
      serviceId:
        type: string
      name:
        type: string
  ServiceDocument:
    type: object
    properties:
      id:
        type: string
      serviceId:
        type: string
      service-documentId:
        type: string
      owner:
        type: string
      ownerId:
        type: string
      title:
        type: string
      modifed:
        type: string
        format: dateTime
      size:
        type: string
      file:
        type: string
  RunningServicesListItem:
    type: object
    properties:
      title:
        type: string
      serviceId:
        type: string
      projectId:
        type: string
      currentStatus:
        $ref: '#/definitions/CurrentStatus'

  MessagesListItem:
    type: object
    properties:
      user_name:
        type: string
      image:
        type: string
      text:
        type: string
      created_at:
        type: string
      title:
        type: string
      link:
        type: string
  UserBasicInformation:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      company:
        type: string
  UserDetails:
    type: object
    properties:
      displayName:
        type: string
      accountId:
        type: string
      profileId:
        type: string
      companyId:
        type: string
      role:
        type: string
      termsConditions:
        type: boolean
      notifications:
        type: object
        properties:
          total:
            type: number
          items:
            type: array
            items:
              $ref: '#/definitions/UserNotification'
      runningServices:
        type: object
        properties:
          total:
            type: number
          items:
            type: array
            items:
              $ref: '#/definitions/RunningServicesListItem'

      messages:
        type: object
        properties:
          total:
            type: integer
          items:
            type: array
            items:
              $ref: '#/definitions/MessagesListItem'
      onboarding:
        type: object
        properties:
          profile:
            type: boolean
          account:
            type: boolean
          company:
            type: boolean
          storefront:
            type: boolean
  UserAccountPrivacy:
    type: object
    properties:
      email:
        $ref: '#/definitions/UserAccountPrivacyItem'
      phone:
        $ref: '#/definitions/UserAccountPrivacyItem'
      location:
        $ref: '#/definitions/UserAccountPrivacyItem'
  UserAccountPrivacyItem:
    type: object
    properties:
      enable:
        type: boolean
      value:
        type: string
  UserAccount:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      profileId:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      displayName:
        type: string
      email:
        type: string
      deactivated:
        type: boolean
      location:
        type: string
      timezone:
        type: string
      privacy:
        type: object
        properties:
          public:
            $ref: '#/definitions/UserAccountPrivacy'
          private:
            $ref: '#/definitions/UserAccountPrivacy'
  UserAccountServer:
    type: object
    properties:
      id:
        type: string
      accountId:
        type: string
      name:
        type: string
      ip:
        type: string
      status:
        type: string
  AccountNotificationCategoryItem:
    type: object
    properties:
      id:
        type: string
      account-notification-categoryId:
        type: string
      title:
        type: string
  AccountNotificationCategory:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      position:
        type: number
      account-notification-category-items:
        type: array
        items:
          $ref: '#/definitions/AccountNotificationCategoryItem'
  AccountNotificationSetting:
    type: object
    properties:
      id:
        type: string
      accountId:
        type: string
      section:
        type: string
        enum:
          - 'website'
          - 'email'
      account-notification-category-itemId:
        type: string
      selected:
        type: boolean
  UserNotificationProfileParams:
    type: object
    properties:
      profileId:
        type: string
      displayName:
        type: string
  UserNotificationCompanyParams:
    type: object
    properties:
      companyId:
        type: string
      companyName:
        type: string
      displayName:
        type: string
  UserNotificationDiscussionParams:
    type: object
    properties:
      discussionId:
        type: string
      displayName:
        type: string
  UserNotificationServiceParams:
    type: object
    properties:
      projectId:
        type: string
      projectTitle:
        type: string
      serviceId:
        type: string
      serviceTitle:
        type: string
      displayName:
        type: string
  UserNotificationMarketParams:
    type: object
    properties:
      serviceId:
        type: string
      serviceTitle:
        type: string
      displayName:
        type: string
  UserNotificationProjectParams:
    type: object
    properties:
      projectId:
        type: string
      projectTitle:
        type: string
      displayName:
        type: string
  UserNotificationCommunityParams:
    type: object
    properties:
      eventId:
        type: string
      eventTitle:
        type: string
  UserNotificationTaskParams:
    type: object
    properties:
      projectId:
        type: string
      projectTitle:
        type: string
      taskId:
        type: string
      displayName:
        type: string
  UserNotification:
    type: object
    properties:
      id:
        type: string
      image:
        type: string
      period:
        type: string
        enum:
          - today
          - week
          - month
      type:
        type: string
        enum:
          - profile
          - discussion
          - service
          - company
          - marketplace
          - community
          - project
          - task
      event:
        type: string
        enum:
          - ACCEPT_INVITATION
          - ANNOUNCEMENT_DMC
          - ANNOUNCEMENT_SYSTEM
          - EVENT_DMC
          - FAVORITED_COMPONENT
          - FAVORITED_SERVICE
          - FOLLOW_COMPANY
          - FOLLOW_DISCUSSION
          - FOLLOW_USER
          - JOIN_PUBLIC_PROJECT
          - PROJECT_DUE
          - NEW_DISCUSSION
          - REJECT_INVITATION
          - REPLY_DISCUSSION
          - REPLY_REVIEW
          - REVIEW_COMPANY
          - REVIEW_COMPONENT
          - REVIEW_SERVICE
          - REVIEW_USER
          - SERVICE_ERROR
          - SERVICE_FINISH
          - SERVICE_SHARED
          - SERVICE_RUN
          - SUBSCRIBE_SERVICE_TO_YOUR_PROJECT
          - SUBSCRIBE_USER_TO_COMPANY
          - SUBSCRIBE_YOUR_SERVICE_TO_PROJECT
          - TASK_ASSIGN
          - TASK_DUE
          - TASK_UPDATE
          - UPDATE_COMPANY_PROFILE
          - UPDATE_COMPANY_STOREFRONT
          - UPDATE_PROJECT
          - UPDATE_SERVICE
          - UPDATE_USER_PROFILE
          - UNSUBSCRIBE_SERVICE_TO_YOUR_PROJECT
      date:
        type: string
        format: dateTime
      read: 
        type: boolean
      cleared: 
        type: boolean
      linkParams:
        type: object
        enum:
          - $ref: '#/definitions/UserNotificationProfileParams'
          - $ref: '#/definitions/UserNotificationDiscussionParams'
          - $ref: '#/definitions/UserNotificationServiceParams'
          - $ref: '#/definitions/UserNotificationCompanyParams'
          - $ref: '#/definitions/UserNotificationMarketParams'
          - $ref: '#/definitions/UserNotificationProjectParams'
          - $ref: '#/definitions/UserNotificationCommunityParams'
          - $ref: '#/definitions/UserNotificationTaskParams'
  UserNotificationStat:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      events:
        type: array
        items:
          type: string
      today:
        type: number
      week:
        type: number
      month:
        type: number
  CommunityAnnouncemntComment:
    type: object
    properties:
      id:
        type: string
      accountId:
        type: string
      announcementId:
        type: string
      text:
        type: string
      created_at:
        type: string
        format: dateTime
  CommunityAnnouncemnt:
    type: object
    properties:
      id:
        type: string
      text:
        type: string
      created_at:
        type: string
        format: dateTime
      announcement_comments:
        type: array
        items:
          $ref: '#/definitions/CommunityAnnouncemntComment'
  CommunityEvent:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      date:
        type: string
        format: dateTime
      startTime:
        type: string
        format: dateTime
      endTime:
        type: string
        format: dateTime
      address:
        type: string
      description:
        type: string
  CompanyHistory:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      title:
        type: string
      date:
        type: string
        format: dateTime
      profileId:
        type: string
      user:
        type: string
      link:
        type: string
      section:
        type: string
        enum:
          - public
          - mutual
      period:
        type: string
        enum:
          - today
          - week
      type:
          type: string
          enum:
            - completed
            - rated
            - added
            - worked
  IndividualDiscussionComment:
    type: object
    properties:
      id:
        type: string
      individual-discussionId:
        type: string
      accountId:
        type: string
      full_name:
        type: string
      avatar:
        type: string
      text:
        type: string
      created_at:
        type: number
        format: milliseconds
      reply:
        type: boolean
      commentId:
        type: string
      like:
        type: number
      dislike:
        type: number
      projectId:
        type: number
  IndividualDiscussionCommentHelpful:
    type: object
    properties:
      id:
        type: string
      commentId:
        type: string
      accountId:
        type: string
      helpfull:
        type: boolean
  IndividualDiscussionCommentFlagged:
    type: object
    properties:
      id:
        type: string
      commentId:
        type: string
      accountId:
        type: string
  IndividualDiscussion:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      message:
        type: string
      created_by:
        type: string
      created_at:
        type: number
        format: milliseconds
      accountId:
        type: string
      projectId:
        type: string
  IndividualDiscussionTag:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      individual-discussionId:
        type: string
  FollowingIndividualDiscussion:
    type: object
    properties:
      id:
        type: string
      accountId:
        type: string
      individual-discussionId:
        type: string
  FollowingCompany:
    type: object
    properties:
      id:
        type: string
      accountId:
        type: string
      companyId:
        type: string
  ServiceHistory:
    type: object
    properties:
      id:
        type: string
      serviceId:
        type: string
      title:
        type: string
      date:
        type: string
        format: dateTime
      user:
        type: string
      link:
        type: string
      section:
        type: string
        enum:
          - project
          - marketplace
      period:
        type: string
        enum:
          - today
          - week
  PostServiceInputPosition:
    type: object
    properties:
      serviceId:
        type: string
      positions:
        type: array
        items:
          $ref: '#/definitions/ServiceInputPosition'
  ServiceInputsPositions:
    type: object
    properties:
      id:
        type: string
      serviceId:
        type: string
      positions:
        type: array
        items:
          $ref: '#/definitions/ServiceInputPosition'
  ServiceInputPosition:
    type: object
    properties:
      name:
        type: string
      position:
        type: number
  DomeEntity:
    type: object
    properties:
      type:
        type: string
      name:
        type: string
      domeServer:
        type: string
      dateModified:
        type: number
      description:
        type: string
      modelId:
        type: string
      interfaceId:
        type: string
      version:
        type: string
      path:
        type: array
        items:
          type: number
      children:
        $ref: '#/definitions/DomeEntity'
  DomeResponseEntity:
    type: object
    properties:
      status:
        type: string
      pkg:
        $ref: '#/definitions/DomeEntity'
  DomeModelParam:
    type: object
    properties:
      type:
        type: string
      name:
        type: string
      unit:
        type: string
      category:
        type: string
      value:
        type: object
      parameterid:
        type: string
      instancename:
        type: string
  DomeModelResponse:
    type: object
    properties:
      status:
        type: string
      pkg:
        $ref: '#/definitions/DomeModelResponsePkg'
  DomeModelResponsePkg:
    type: object
    properties:
      interFace:
        type: object
        properties:
          version:
            type: number
          modelId:
            type: string
          interfaceId:
            type: string
          projectId:
            type: string
          type:
            type: string
          name:
            type: string
          path:
            type: array
            items:
              type: number
      inParams:
        type: array
        items:
          $ref: '#/definitions/DomeModelParam'
      outParams:
        type: array
        items:
          $ref: '#/definitions/DomeModelParam'
      modelName:
        type: string
      modelDescription:
        type: string
      server:
        type: object
        properties:
          name:
            type: string
          port:
            type: string
          user:
            type: string
          pw:
            type: string
          space:
            type: string
  GetDomeInterface:
    type: object
    properties:
      id:
        type: string
      version:
        type: number
      modelId:
        type: string
      interfaceId:
        type: string
      type:
        type: string
      name:
        type: string
      path:
        type: array
        items:
          type: number
      serviceId:
        type: number
      domeServer:
        type: string
  PostUpdateDomeInterface:
    type: object
    properties:
      version:
        type: number
      modelId:
        type: string
      interfaceId:
        type: string
      type:
        type: string
      name:
        type: string
      path:
        type: array
        items:
          type: number
      serviceId:
        type: number
      domeServer:
        type: string
  PostServiceRun:
    type: object
    properties:
      serviceId:
        type: string
      accountId:
        type: string
      runBy:
        type: string
      status:
        type: number
      percentComplete:
        type: number
      startDate:
        type: string
      startTime:
        type: string
      project:
        $ref: '#/definitions/SimplifiedProject'
  GetServiceRun:
    type: object
    properties:
      serviceId:
        type: string
      accountId:
        type: string
      runBy:
        type: string
      status:
        type: number
      percentCompleted:
        type: number
      startDate:
        type: string
      startTime:
        type: string
      project:
        $ref: '#/definitions/SimplifiedProject'
      id:
        type: string
      stopDate:
        type: string
      stopTime:
        type: string
      interface:
        $ref: '#/definitions/Interface'
  UpdateServiceRun:
    type: object
    properties:
      serviceId:
        type: string
      accountId:
        type: string
      runBy:
        type: string
      status:
        type: number
      percentCompleted:
        type: number
      startDate:
        type: string
      startTime:
        type: string
      project:
        $ref: '#/definitions/SimplifiedProject'
      stopDate:
        type: string
      stopTime:
        type: string
      interface:
        $ref: '#/definitions/Interface'
  FaqArticle:
    type: object
    properties:
      id:
        type: string
      faq_subcategoryId:
        type: string
      title:
        type: string
      text:
        type: string
  FaqSubcategory:
    type: object
    properties:
      id:
        type: string
      faq_categoryId:
        type: string
      title:
        type: string
  FaqCategory:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
  PostProjectTag:
    type: object
    properties:
      projectId:
        type: string
      name:
        type: string
  GetProjectTag:
    type: object
    properties:
      id:
        type: string
      projectId:
        type: string
      name:
        type: string
  DocumentBody:
    type: object
    properties:
      title:
        type: string
  PostProjectJoinRequest:
    type: object
    properties:
      projectId:
        type: string
      profileId:
        type: string
      decline:
        description: true - if admin decline join request from user
        type: boolean
  GetProjectJoinRequest:
    type: object
    properties:
      id:
        type: string
      projectId:
        type: string
      profileId:
        type: string
      decline:
        description: true - if admin decline join request from user
        type: boolean
  PostCompanyJoinRequest:
      type: object
      properties:
        companyId:
          type: string
        profileId:
          type: string
  GetCompanyJoinRequest:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      profileId:
        type: string
      decline:
        description: true - if admin decline join request from user
        type: boolean
  PostRemovedCompanyMember:
    type: object
    properties:
      companyId:
        type: string
      profileId:
        type: string
  GetRemovedCompanyMember:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
      profileId:
        type: string
  GetCompanyContactMethod:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      companyId:
        type: string
      value:
        type: string
  PostCompanyContactMethod:
    type: object
    properties:
      name:
        type: string
      companyId:
        type: string
      value:
        type: string
  PostSuggestCompany:
      type: object
      properties:        
        companyId:
          type: string
  GetSuggestCompany:
    type: object
    properties:
      id:
        type: string
      companyId:
        type: string
  PostCompareService:
    type: object
    properties:
      serviceId:
        type: string
      profileId:
        type: string
  GetCompareService:
    type: object
    properties:
      id:
        type: string
      serviceId:
        type: string
      profileId:
        type: string
